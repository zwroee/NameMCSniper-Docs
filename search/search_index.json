{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"NameMC Sniper","text":"<p>A powerful CLI Minecraft username sniper that uses the NameMC API with proxy support and Discord notifications. Features automated monitoring, scheduled notifications, and high-speed sniping with bearer token authentication.</p> <p> </p>"},{"location":"#features","title":"Features","text":"<ul> <li> Bearer Token Authentication - Secure authentication without email/password</li> <li> Proxy Support - Rotate through multiple proxies with health checking</li> <li> Discord Notifications - Real-time updates via webhook or bot</li> <li> Scheduled Notifications - Alerts at 24h, 12h, 6h, 2h, 1h, 30m, 5m, 1m, 30s before drop</li> <li> High-Speed Sniping - Concurrent requests with minimal delay</li> <li> Rich CLI Interface - Beautiful terminal output with colors and tables</li> <li> Comprehensive Logging - Detailed logs with configurable levels</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li> <p>Install Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Create Configuration <pre><code>python Main.py config-create\n</code></pre></p> </li> <li> <p>Start Sniping <pre><code>python Main.py snipe -u \"DesiredUsername\" -t \"your_bearer_token\"\n</code></pre></p> </li> </ol>"},{"location":"#documentation-sections","title":"Documentation Sections","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - Set up NameMC Sniper on your system</li> <li>Configuration - Configure the sniper for optimal performance</li> <li>Authentication - Get your Minecraft bearer token</li> </ul>"},{"location":"#usage","title":"Usage","text":"<ul> <li>Basic Usage - Learn the essential commands</li> <li>Command Reference - Complete command documentation</li> <li>Discord Setup - Configure Discord notifications</li> <li>Proxy Setup - Set up proxy rotation</li> </ul>"},{"location":"#advanced","title":"Advanced","text":"<ul> <li>How It Works - Understanding the sniping process</li> <li>Performance Optimization - Maximize sniping success</li> <li>Troubleshooting - Solve common issues</li> </ul>"},{"location":"#important-notice","title":"Important Notice","text":"<p>Educational Purpose Only</p> <p>This tool is for educational purposes only. Make sure to comply with Minecraft's Terms of Service and use responsibly.</p>"},{"location":"#support","title":"Support","text":"<p>Need help? Check out our Support page for assistance options.</p> <p>Ready to get started? Head over to the Installation guide!</p>"},{"location":"advanced/how-it-works/","title":"How It Works","text":"<p>Understanding the internal mechanics of NameMC Sniper and the username sniping process.</p>"},{"location":"advanced/how-it-works/#overview","title":"Overview","text":"<p>NameMC Sniper operates in three main phases:</p> <ol> <li>Monitoring Phase - Schedules notifications and waits for drop time</li> <li>Sniping Phase - High-speed claiming attempts</li> <li>Result Phase - Reports outcome and cleanup</li> </ol> <pre><code>graph TD\n    A[Start Sniper] --&gt; B[Load Configuration]\n    B --&gt; C[Validate Setup]\n    C --&gt; D[Schedule Notifications]\n    D --&gt; E[Monitor Drop Time]\n    E --&gt; F{Drop Time Approaching?}\n    F --&gt;|No| E\n    F --&gt;|Yes| G[Start Sniping Phase]\n    G --&gt; H[Concurrent Requests]\n    H --&gt; I{Username Claimed?}\n    I --&gt;|No| J{Max Attempts?}\n    J --&gt;|No| H\n    J --&gt;|Yes| K[Report Failure]\n    I --&gt;|Yes| L[Report Success]\n    K --&gt; M[Cleanup]\n    L --&gt; M\n</code></pre>"},{"location":"advanced/how-it-works/#monitoring-phase","title":"Monitoring Phase","text":""},{"location":"advanced/how-it-works/#initialization","title":"Initialization","text":"<p>When you start the sniper, it performs several initialization steps:</p> <pre><code># Simplified initialization process\ndef initialize_sniper():\n    # 1. Load and validate configuration\n    config = load_config(\"config.yaml\")\n    validate_config(config)\n\n    # 2. Setup authentication\n    bearer_token = config.get(\"bearer_token\")\n    validate_bearer_token(bearer_token)\n\n    # 3. Initialize proxies\n    if config.proxy.enabled:\n        proxy_manager = ProxyManager(config.proxy.proxies)\n        proxy_manager.test_all_proxies()\n\n    # 4. Setup Discord notifications\n    if config.discord.enabled:\n        discord_client = DiscordClient(config.discord)\n        discord_client.test_connection()\n\n    # 5. Get username drop time\n    drop_time = get_drop_time(config.target_username)\n\n    return SnipeSession(config, drop_time)\n</code></pre>"},{"location":"advanced/how-it-works/#notification-scheduling","title":"Notification Scheduling","text":"<p>The sniper schedules notifications at configured intervals:</p> <pre><code>def schedule_notifications(drop_time, intervals):\n    notifications = []\n\n    for interval in intervals:\n        notification_time = drop_time - timedelta(seconds=interval)\n\n        if notification_time &gt; datetime.now():\n            notifications.append({\n                'time': notification_time,\n                'interval': interval,\n                'message': format_countdown_message(interval)\n            })\n\n    # Sort by time\n    notifications.sort(key=lambda x: x['time'])\n    return notifications\n</code></pre>"},{"location":"advanced/how-it-works/#drop-time-detection","title":"Drop Time Detection","text":"<p>The sniper determines when a username becomes available:</p> <pre><code>def get_drop_time(username):\n    # Query NameMC API for username information\n    response = requests.get(f\"https://api.namemc.com/profile/{username}\")\n\n    if response.status_code == 200:\n        data = response.json()\n\n        # Check if username is currently taken\n        if data.get('status') == 'taken':\n            # Calculate drop time (37 days after last name change)\n            last_change = datetime.fromisoformat(data['name_history'][-1]['changed_at'])\n            drop_time = last_change + timedelta(days=37)\n            return drop_time\n        else:\n            # Username is already available\n            return datetime.now()\n\n    raise Exception(f\"Could not determine drop time for {username}\")\n</code></pre>"},{"location":"advanced/how-it-works/#sniping-phase","title":"Sniping Phase","text":""},{"location":"advanced/how-it-works/#pre-snipe-preparation","title":"Pre-Snipe Preparation","text":"<p>Before starting the actual sniping attempts:</p> <pre><code>def prepare_sniping(config, drop_time):\n    # Calculate when to start sniping\n    start_time = drop_time - timedelta(seconds=config.start_sniping_at_seconds)\n\n    # Wait until start time\n    while datetime.now() &lt; start_time:\n        time.sleep(0.1)\n\n    # Initialize request session\n    session = requests.Session()\n    session.headers.update({\n        'Authorization': f'Bearer {config.bearer_token}',\n        'Content-Type': 'application/json',\n        'User-Agent': 'NameMC-Sniper/1.0'\n    })\n\n    return session\n</code></pre>"},{"location":"advanced/how-it-works/#concurrent-request-strategy","title":"Concurrent Request Strategy","text":"<p>The sniper uses multiple concurrent requests to maximize success chances:</p> <pre><code>import asyncio\nimport aiohttp\nfrom concurrent.futures import ThreadPoolExecutor\n\nasync def snipe_username(config, session_pool):\n    username = config.target_username\n    max_attempts = config.max_snipe_attempts\n    concurrent_requests = config.concurrent_requests\n\n    attempt_count = 0\n    success = False\n\n    # Create semaphore to limit concurrent requests\n    semaphore = asyncio.Semaphore(concurrent_requests)\n\n    while attempt_count &lt; max_attempts and not success:\n        # Create batch of concurrent requests\n        tasks = []\n        batch_size = min(concurrent_requests, max_attempts - attempt_count)\n\n        for _ in range(batch_size):\n            task = asyncio.create_task(\n                make_snipe_request(semaphore, username, session_pool)\n            )\n            tasks.append(task)\n\n        # Wait for any request to succeed\n        done, pending = await asyncio.wait(\n            tasks, \n            return_when=asyncio.FIRST_COMPLETED\n        )\n\n        # Cancel remaining requests if one succeeded\n        for task in pending:\n            task.cancel()\n\n        # Check results\n        for task in done:\n            result = await task\n            if result['success']:\n                success = True\n                break\n\n        attempt_count += batch_size\n\n        # Small delay between batches\n        if not success:\n            await asyncio.sleep(config.request_delay_ms / 1000)\n\n    return success, attempt_count\n</code></pre>"},{"location":"advanced/how-it-works/#individual-request-logic","title":"Individual Request Logic","text":"<p>Each sniping request follows this pattern:</p> <pre><code>async def make_snipe_request(semaphore, username, session_pool):\n    async with semaphore:\n        try:\n            # Get proxy from pool\n            proxy = session_pool.get_proxy()\n\n            # Prepare request payload\n            payload = {\n                'profileName': username\n            }\n\n            # Make the claim request\n            async with aiohttp.ClientSession() as session:\n                async with session.post(\n                    'https://api.minecraftservices.com/minecraft/profile/name/{username}',\n                    json=payload,\n                    proxy=proxy.url,\n                    timeout=aiohttp.ClientTimeout(total=5)\n                ) as response:\n\n                    if response.status == 200:\n                        # Success! Username claimed\n                        return {\n                            'success': True,\n                            'status_code': 200,\n                            'proxy': proxy.url,\n                            'response_time': response.headers.get('response-time')\n                        }\n                    else:\n                        # Request failed\n                        return {\n                            'success': False,\n                            'status_code': response.status,\n                            'proxy': proxy.url,\n                            'error': await response.text()\n                        }\n\n        except Exception as e:\n            return {\n                'success': False,\n                'error': str(e),\n                'proxy': proxy.url if 'proxy' in locals() else None\n            }\n</code></pre>"},{"location":"advanced/how-it-works/#proxy-rotation-logic","title":"Proxy Rotation Logic","text":"<p>The proxy manager handles rotation and health checking:</p> <pre><code>class ProxyManager:\n    def __init__(self, proxy_list):\n        self.proxies = [Proxy(url) for url in proxy_list]\n        self.current_index = 0\n        self.failed_proxies = set()\n\n    def get_proxy(self):\n        # Round-robin selection with health checking\n        attempts = 0\n        while attempts &lt; len(self.proxies):\n            proxy = self.proxies[self.current_index]\n            self.current_index = (self.current_index + 1) % len(self.proxies)\n\n            if proxy.url not in self.failed_proxies:\n                return proxy\n\n            attempts += 1\n\n        # All proxies failed, reset and try again\n        self.failed_proxies.clear()\n        return self.proxies[0]\n\n    def mark_proxy_failed(self, proxy_url):\n        self.failed_proxies.add(proxy_url)\n\n    def test_proxy_health(self, proxy):\n        try:\n            response = requests.get(\n                'https://api.minecraft.net/status',\n                proxies={'http': proxy.url, 'https': proxy.url},\n                timeout=5\n            )\n            return response.status_code == 200\n        except:\n            return False\n</code></pre>"},{"location":"advanced/how-it-works/#result-phase","title":"Result Phase","text":""},{"location":"advanced/how-it-works/#success-handling","title":"Success Handling","text":"<p>When a username is successfully claimed:</p> <pre><code>def handle_success(username, attempt_count, duration, proxy_used):\n    # Log success\n    logger.info(f\"Successfully claimed username: {username}\")\n    logger.info(f\"Attempts made: {attempt_count}\")\n    logger.info(f\"Duration: {duration:.2f} seconds\")\n    logger.info(f\"Proxy used: {proxy_used}\")\n\n    # Send Discord notification\n    if discord_client:\n        embed = create_success_embed(username, attempt_count, duration, proxy_used)\n        discord_client.send_embed(embed)\n\n    # Update statistics\n    stats = {\n        'username': username,\n        'success': True,\n        'attempts': attempt_count,\n        'duration': duration,\n        'proxy': proxy_used,\n        'timestamp': datetime.now().isoformat()\n    }\n\n    save_statistics(stats)\n</code></pre>"},{"location":"advanced/how-it-works/#failure-handling","title":"Failure Handling","text":"<p>When sniping fails:</p> <pre><code>def handle_failure(username, attempt_count, duration, last_error):\n    # Log failure\n    logger.error(f\"Failed to claim username: {username}\")\n    logger.error(f\"Attempts made: {attempt_count}\")\n    logger.error(f\"Duration: {duration:.2f} seconds\")\n    logger.error(f\"Last error: {last_error}\")\n\n    # Send Discord notification\n    if discord_client:\n        embed = create_failure_embed(username, attempt_count, duration, last_error)\n        discord_client.send_embed(embed)\n\n    # Update statistics\n    stats = {\n        'username': username,\n        'success': False,\n        'attempts': attempt_count,\n        'duration': duration,\n        'error': last_error,\n        'timestamp': datetime.now().isoformat()\n    }\n\n    save_statistics(stats)\n</code></pre>"},{"location":"advanced/how-it-works/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"advanced/how-it-works/#request-timing","title":"Request Timing","text":"<p>The sniper uses several techniques to minimize latency:</p> <ol> <li>Pre-established connections - Keep HTTP connections alive</li> <li>DNS pre-resolution - Resolve hostnames before sniping</li> <li>Optimal request timing - Start requests just before drop time</li> <li>Concurrent execution - Multiple simultaneous requests</li> </ol>"},{"location":"advanced/how-it-works/#memory-management","title":"Memory Management","text":"<pre><code># Efficient memory usage during sniping\nclass SnipeSession:\n    def __init__(self, config):\n        self.config = config\n        # Pre-allocate request objects\n        self.request_pool = [\n            self.create_request_object() \n            for _ in range(config.concurrent_requests)\n        ]\n\n    def create_request_object(self):\n        return {\n            'session': requests.Session(),\n            'headers': self.get_headers(),\n            'payload': self.get_payload()\n        }\n</code></pre>"},{"location":"advanced/how-it-works/#network-optimization","title":"Network Optimization","text":"<pre><code># Optimize network settings\ndef optimize_network_settings():\n    # Increase socket buffer sizes\n    socket.socket.setsockopt(socket.SOL_SOCKET, socket.SO_RCVBUF, 65536)\n    socket.socket.setsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF, 65536)\n\n    # Disable Nagle's algorithm for lower latency\n    socket.socket.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n    # Set keep-alive options\n    socket.socket.setsockopt(socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1)\n</code></pre>"},{"location":"advanced/how-it-works/#monitoring-and-analytics","title":"Monitoring and Analytics","text":""},{"location":"advanced/how-it-works/#real-time-metrics","title":"Real-time Metrics","text":"<p>The sniper tracks various metrics during operation:</p> <pre><code>class SnipeMetrics:\n    def __init__(self):\n        self.start_time = time.time()\n        self.requests_sent = 0\n        self.responses_received = 0\n        self.errors_encountered = 0\n        self.proxy_switches = 0\n        self.average_response_time = 0\n\n    def update_response_time(self, response_time):\n        self.responses_received += 1\n        self.average_response_time = (\n            (self.average_response_time * (self.responses_received - 1) + response_time) \n            / self.responses_received\n        )\n\n    def get_success_rate(self):\n        if self.requests_sent == 0:\n            return 0\n        return (self.responses_received / self.requests_sent) * 100\n</code></pre>"},{"location":"advanced/how-it-works/#performance-logging","title":"Performance Logging","text":"<pre><code># Detailed performance logging\ndef log_performance_metrics(metrics):\n    logger.info(\"=== Snipe Performance Metrics ===\")\n    logger.info(f\"Duration: {time.time() - metrics.start_time:.2f}s\")\n    logger.info(f\"Requests sent: {metrics.requests_sent}\")\n    logger.info(f\"Responses received: {metrics.responses_received}\")\n    logger.info(f\"Success rate: {metrics.get_success_rate():.1f}%\")\n    logger.info(f\"Average response time: {metrics.average_response_time:.0f}ms\")\n    logger.info(f\"Proxy switches: {metrics.proxy_switches}\")\n    logger.info(f\"Errors: {metrics.errors_encountered}\")\n</code></pre>"},{"location":"advanced/how-it-works/#technical-insights","title":"Technical Insights","text":""},{"location":"advanced/how-it-works/#why-30-seconds-before-drop","title":"Why 30 Seconds Before Drop?","text":"<p>The default 30-second start time is optimized for: - Network latency - Account for request travel time - Server processing - Allow time for Minecraft servers to process - Competition - Start before other snipers - Error recovery - Time to retry failed requests</p>"},{"location":"advanced/how-it-works/#concurrent-request-strategy_1","title":"Concurrent Request Strategy","text":"<p>Multiple concurrent requests increase success probability because: - Network redundancy - Different routes to servers - Timing variations - Slight timing differences - Proxy diversity - Multiple IP addresses - Server load distribution - Spread across server instances</p>"},{"location":"advanced/how-it-works/#bearer-token-vs-credentials","title":"Bearer Token vs Credentials","text":"<p>Bearer tokens are preferred because: - Security - No password exposure - Performance - No authentication overhead per request - Reliability - Less likely to trigger security measures - Compliance - Better adherence to API best practices</p>"},{"location":"advanced/how-it-works/#next-steps","title":"Next Steps","text":"<ul> <li>Learn performance optimization techniques in Performance Optimization</li> <li>Troubleshoot common issues in Troubleshooting</li> <li>Understand legal considerations in Legal Notice</li> </ul>"},{"location":"advanced/performance/","title":"Performance Optimization","text":"<p>Maximize your sniping success rate with advanced performance tuning techniques.</p>"},{"location":"advanced/performance/#quick-performance-checklist","title":"Quick Performance Checklist","text":"<ul> <li>[ ] Use high-quality residential proxies</li> <li>[ ] Optimize <code>concurrent_requests</code> and <code>request_delay_ms</code></li> <li>[ ] Run on a server with low latency to Minecraft servers</li> <li>[ ] Use SSD storage for faster I/O</li> <li>[ ] Ensure stable, high-speed internet connection</li> <li>[ ] Monitor system resources during sniping</li> </ul>"},{"location":"advanced/performance/#configuration-optimization","title":"Configuration Optimization","text":""},{"location":"advanced/performance/#high-performance-configuration","title":"High-Performance Configuration","text":"<p>For maximum speed and success rate:</p> <pre><code>snipe:\n  start_sniping_at_seconds: 30\n  max_snipe_attempts: 200\n  request_delay_ms: 10        # Aggressive timing\n  concurrent_requests: 20     # High concurrency\n  use_multiple_threads: true\n\nproxy:\n  enabled: true\n  rotation_enabled: true\n  timeout: 5                  # Fast timeout\n  max_retries: 2              # Quick failover\n\ndiscord:\n  enabled: false              # Disable during snipe for performance\n</code></pre>"},{"location":"advanced/performance/#conservative-configuration","title":"Conservative Configuration","text":"<p>For stability and compliance:</p> <pre><code>snipe:\n  start_sniping_at_seconds: 45\n  max_snipe_attempts: 100\n  request_delay_ms: 50        # Respectful timing\n  concurrent_requests: 5      # Lower concurrency\n  use_multiple_threads: true\n\nproxy:\n  enabled: true\n  rotation_enabled: true\n  timeout: 10                 # Longer timeout\n  max_retries: 3              # More retries\n\ndiscord:\n  enabled: true               # Keep notifications\n</code></pre>"},{"location":"advanced/performance/#performance-tuning-guide","title":"Performance Tuning Guide","text":""},{"location":"advanced/performance/#1-concurrent-requests-optimization","title":"1. Concurrent Requests Optimization","text":"<p>Find the optimal number of concurrent requests:</p> <pre><code># Test different concurrency levels\nconcurrency_levels = [1, 5, 10, 15, 20, 25, 30]\nresults = {}\n\nfor level in concurrency_levels:\n    config.concurrent_requests = level\n    success_rate = run_performance_test(config)\n    results[level] = success_rate\n\n# Find optimal level\noptimal_level = max(results, key=results.get)\nprint(f\"Optimal concurrency: {optimal_level}\")\n</code></pre> <p>Guidelines: - Start with 10 concurrent requests - Increase gradually while monitoring success rate - Watch for diminishing returns - more isn't always better - Consider proxy limits - don't exceed proxy capacity</p>"},{"location":"advanced/performance/#2-request-delay-optimization","title":"2. Request Delay Optimization","text":"<p>Balance speed with rate limiting:</p> <pre><code># Ultra-aggressive (high risk)\nrequest_delay_ms: 5\n\n# Aggressive (medium risk)\nrequest_delay_ms: 15\n\n# Balanced (recommended)\nrequest_delay_ms: 25\n\n# Conservative (low risk)\nrequest_delay_ms: 50\n</code></pre> <p>Testing methodology: <pre><code># Test different delays\nfor delay in 5 10 15 25 50; do\n    echo \"Testing delay: ${delay}ms\"\n    python Main.py snipe --dry-run --request-delay $delay\ndone\n</code></pre></p>"},{"location":"advanced/performance/#3-proxy-performance-optimization","title":"3. Proxy Performance Optimization","text":""},{"location":"advanced/performance/#proxy-selection-criteria","title":"Proxy Selection Criteria","text":"<p>Latency Testing: <pre><code>import time\nimport requests\n\ndef test_proxy_latency(proxy_url):\n    latencies = []\n\n    for _ in range(10):\n        start = time.time()\n        try:\n            response = requests.get(\n                \"https://api.minecraft.net/status\",\n                proxies={\"http\": proxy_url, \"https\": proxy_url},\n                timeout=5\n            )\n            if response.status_code == 200:\n                latency = (time.time() - start) * 1000\n                latencies.append(latency)\n        except:\n            continue\n\n    if latencies:\n        avg_latency = sum(latencies) / len(latencies)\n        return avg_latency\n    return float('inf')\n\n# Test all proxies and rank by latency\nproxy_performance = {}\nfor proxy in proxy_list:\n    latency = test_proxy_latency(proxy)\n    proxy_performance[proxy] = latency\n\n# Sort by performance\nsorted_proxies = sorted(proxy_performance.items(), key=lambda x: x[1])\n</code></pre></p>"},{"location":"advanced/performance/#geographic-optimization","title":"Geographic Optimization","text":"<p>Recommended proxy locations: 1. US East Coast - Closest to many Minecraft servers 2. US West Coast - Good for Pacific region 3. Europe (London/Amsterdam) - European servers 4. Singapore - Asian servers</p> <pre><code>proxy:\n  proxies:\n    # Prioritize by geographic proximity to Minecraft servers\n    - \"http://us-east-proxy1:port\"     # Primary\n    - \"http://us-east-proxy2:port\"     # Backup\n    - \"http://us-west-proxy1:port\"     # Secondary\n    - \"http://europe-proxy1:port\"      # Tertiary\n</code></pre>"},{"location":"advanced/performance/#system-optimization","title":"System Optimization","text":""},{"location":"advanced/performance/#hardware-requirements","title":"Hardware Requirements","text":"<p>Minimum specs: - CPU: 2 cores, 2.0 GHz - RAM: 4 GB - Storage: 1 GB free space - Network: 10 Mbps stable connection</p> <p>Recommended specs: - CPU: 4+ cores, 3.0+ GHz - RAM: 8+ GB - Storage: SSD with 10+ GB free - Network: 100+ Mbps with low latency</p> <p>Optimal specs: - CPU: 8+ cores, 3.5+ GHz (Intel i7/AMD Ryzen 7+) - RAM: 16+ GB - Storage: NVMe SSD - Network: Gigabit fiber with &lt;10ms latency</p>"},{"location":"advanced/performance/#operating-system-tuning","title":"Operating System Tuning","text":""},{"location":"advanced/performance/#linux-optimization","title":"Linux Optimization","text":"<pre><code># Increase file descriptor limits\necho \"* soft nofile 65536\" &gt;&gt; /etc/security/limits.conf\necho \"* hard nofile 65536\" &gt;&gt; /etc/security/limits.conf\n\n# Optimize network stack\necho \"net.core.rmem_max = 16777216\" &gt;&gt; /etc/sysctl.conf\necho \"net.core.wmem_max = 16777216\" &gt;&gt; /etc/sysctl.conf\necho \"net.ipv4.tcp_rmem = 4096 65536 16777216\" &gt;&gt; /etc/sysctl.conf\necho \"net.ipv4.tcp_wmem = 4096 65536 16777216\" &gt;&gt; /etc/sysctl.conf\n\n# Apply changes\nsysctl -p\n</code></pre>"},{"location":"advanced/performance/#windows-optimization","title":"Windows Optimization","text":"<pre><code># Increase network buffer sizes\nnetsh int tcp set global autotuninglevel=normal\nnetsh int tcp set global chimney=enabled\nnetsh int tcp set global rss=enabled\n\n# Disable unnecessary services\nsc config \"Windows Search\" start= disabled\nsc config \"Superfetch\" start= disabled\n</code></pre>"},{"location":"advanced/performance/#python-optimization","title":"Python Optimization","text":"<pre><code># Optimize Python runtime\nimport sys\nimport gc\n\n# Disable garbage collection during sniping\ngc.disable()\n\n# Increase recursion limit if needed\nsys.setrecursionlimit(10000)\n\n# Use faster JSON library\ntry:\n    import ujson as json\nexcept ImportError:\n    import json\n\n# Optimize imports\nfrom requests import Session\nfrom concurrent.futures import ThreadPoolExecutor\nfrom asyncio import create_task, gather\n</code></pre>"},{"location":"advanced/performance/#cloud-deployment","title":"Cloud Deployment","text":""},{"location":"advanced/performance/#vps-recommendations","title":"VPS Recommendations","text":"<p>Budget option: - DigitalOcean: $5/month droplet - Vultr: $2.50/month instance - Linode: $5/month nanode</p> <p>Performance option: - AWS EC2: t3.medium or c5.large - Google Cloud: n1-standard-2 - Azure: Standard_B2s</p> <p>Premium option: - Dedicated servers with guaranteed resources - Bare metal for maximum performance - Edge locations close to Minecraft servers</p>"},{"location":"advanced/performance/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM python:3.9-slim\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Set working directory\nWORKDIR /app\n\n# Copy requirements and install\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application\nCOPY . .\n\n# Optimize Python\nENV PYTHONUNBUFFERED=1\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Run sniper\nCMD [\"python\", \"Main.py\", \"snipe\"]\n</code></pre> <pre><code># docker-compose.yml\nversion: '3.8'\nservices:\n  namemc-sniper:\n    build: .\n    volumes:\n      - ./config.yaml:/app/config.yaml\n      - ./logs:/app/logs\n    environment:\n      - MINECRAFT_BEARER_TOKEN=${BEARER_TOKEN}\n    restart: unless-stopped\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 2G\n</code></pre>"},{"location":"advanced/performance/#timing-optimization","title":"Timing Optimization","text":""},{"location":"advanced/performance/#network-latency-measurement","title":"Network Latency Measurement","text":"<pre><code>import ping3\n\ndef measure_latency_to_minecraft():\n    minecraft_servers = [\n        \"api.minecraftservices.com\",\n        \"sessionserver.mojang.com\",\n        \"api.mojang.com\"\n    ]\n\n    latencies = {}\n    for server in minecraft_servers:\n        try:\n            latency = ping3.ping(server, timeout=5)\n            if latency:\n                latencies[server] = latency * 1000  # Convert to ms\n        except:\n            latencies[server] = float('inf')\n\n    return latencies\n\n# Optimize start timing based on latency\nlatencies = measure_latency_to_minecraft()\navg_latency = sum(l for l in latencies.values() if l != float('inf')) / len(latencies)\n\n# Adjust start time based on latency\nif avg_latency &lt; 50:\n    start_seconds = 25  # Low latency - start closer to drop\nelif avg_latency &lt; 100:\n    start_seconds = 30  # Medium latency - default timing\nelse:\n    start_seconds = 40  # High latency - start earlier\n</code></pre>"},{"location":"advanced/performance/#clock-synchronization","title":"Clock Synchronization","text":"<pre><code>import ntplib\nfrom datetime import datetime, timedelta\n\ndef sync_system_clock():\n    try:\n        ntp_client = ntplib.NTPClient()\n        response = ntp_client.request('pool.ntp.org')\n\n        # Calculate time offset\n        system_time = datetime.now().timestamp()\n        ntp_time = response.tx_time\n        offset = ntp_time - system_time\n\n        print(f\"System clock offset: {offset:.3f} seconds\")\n\n        # Warn if offset is significant\n        if abs(offset) &gt; 1.0:\n            print(\"WARNING: System clock is significantly off!\")\n            print(\"Consider syncing your system clock for optimal performance\")\n\n        return offset\n    except Exception as e:\n        print(f\"Could not sync clock: {e}\")\n        return 0\n\n# Use offset in timing calculations\nclock_offset = sync_system_clock()\nadjusted_drop_time = drop_time + timedelta(seconds=clock_offset)\n</code></pre>"},{"location":"advanced/performance/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"advanced/performance/#real-time-metrics-dashboard","title":"Real-time Metrics Dashboard","text":"<pre><code>import time\nfrom collections import deque\n\nclass PerformanceMonitor:\n    def __init__(self):\n        self.start_time = time.time()\n        self.request_times = deque(maxlen=100)\n        self.success_count = 0\n        self.error_count = 0\n        self.proxy_switches = 0\n\n    def record_request(self, response_time, success=True):\n        self.request_times.append(response_time)\n        if success:\n            self.success_count += 1\n        else:\n            self.error_count += 1\n\n    def get_stats(self):\n        if not self.request_times:\n            return {}\n\n        return {\n            'avg_response_time': sum(self.request_times) / len(self.request_times),\n            'min_response_time': min(self.request_times),\n            'max_response_time': max(self.request_times),\n            'success_rate': self.success_count / (self.success_count + self.error_count) * 100,\n            'requests_per_second': len(self.request_times) / (time.time() - self.start_time),\n            'total_requests': self.success_count + self.error_count\n        }\n\n    def print_dashboard(self):\n        stats = self.get_stats()\n        print(\"\\n\" + \"=\"*50)\n        print(\"PERFORMANCE DASHBOARD\")\n        print(\"=\"*50)\n        print(f\"Avg Response Time: {stats.get('avg_response_time', 0):.0f}ms\")\n        print(f\"Success Rate: {stats.get('success_rate', 0):.1f}%\")\n        print(f\"Requests/Second: {stats.get('requests_per_second', 0):.1f}\")\n        print(f\"Total Requests: {stats.get('total_requests', 0)}\")\n        print(\"=\"*50)\n</code></pre>"},{"location":"advanced/performance/#automated-performance-testing","title":"Automated Performance Testing","text":"<pre><code>def run_performance_benchmark(config_variations):\n    results = {}\n\n    for name, config in config_variations.items():\n        print(f\"Testing configuration: {name}\")\n\n        # Run test with this configuration\n        start_time = time.time()\n        success_rate = simulate_snipe_attempts(config)\n        duration = time.time() - start_time\n\n        results[name] = {\n            'success_rate': success_rate,\n            'duration': duration,\n            'score': success_rate / duration  # Success per second\n        }\n\n    # Find best configuration\n    best_config = max(results, key=lambda x: results[x]['score'])\n    print(f\"Best configuration: {best_config}\")\n\n    return results\n\n# Test different configurations\nconfigs = {\n    'conservative': {'concurrent_requests': 5, 'request_delay_ms': 50},\n    'balanced': {'concurrent_requests': 10, 'request_delay_ms': 25},\n    'aggressive': {'concurrent_requests': 20, 'request_delay_ms': 10},\n    'extreme': {'concurrent_requests': 50, 'request_delay_ms': 5}\n}\n\nbenchmark_results = run_performance_benchmark(configs)\n</code></pre>"},{"location":"advanced/performance/#performance-vs-risk-balance","title":"Performance vs. Risk Balance","text":""},{"location":"advanced/performance/#risk-assessment-matrix","title":"Risk Assessment Matrix","text":"Configuration Success Rate Risk Level Recommended Use Conservative 60-70% Low Testing, low-value usernames Balanced 70-80% Medium Most usernames Aggressive 80-90% High High-value usernames Extreme 85-95% Very High Critical usernames only"},{"location":"advanced/performance/#rate-limiting-indicators","title":"Rate Limiting Indicators","text":"<p>Watch for these signs of rate limiting: - HTTP 429 responses - Sudden drop in success rate - Increasing response times - Connection timeouts</p> <pre><code>def detect_rate_limiting(response_times, success_rates):\n    # Check for sudden performance degradation\n    recent_times = response_times[-10:]\n    recent_success = success_rates[-10:]\n\n    if len(recent_times) &gt;= 5:\n        avg_recent = sum(recent_times) / len(recent_times)\n        avg_overall = sum(response_times) / len(response_times)\n\n        # Response time increased significantly\n        if avg_recent &gt; avg_overall * 2:\n            return \"High response times detected - possible rate limiting\"\n\n    if len(recent_success) &gt;= 5:\n        recent_avg = sum(recent_success) / len(recent_success)\n\n        # Success rate dropped significantly\n        if recent_avg &lt; 0.5:\n            return \"Low success rate detected - possible rate limiting\"\n\n    return None\n</code></pre>"},{"location":"advanced/performance/#advanced-techniques","title":"Advanced Techniques","text":""},{"location":"advanced/performance/#adaptive-configuration","title":"Adaptive Configuration","text":"<pre><code>class AdaptiveSniper:\n    def __init__(self, base_config):\n        self.config = base_config\n        self.performance_history = []\n\n    def adapt_configuration(self, current_performance):\n        self.performance_history.append(current_performance)\n\n        # If performance is declining, become more conservative\n        if len(self.performance_history) &gt;= 3:\n            recent_avg = sum(self.performance_history[-3:]) / 3\n            overall_avg = sum(self.performance_history) / len(self.performance_history)\n\n            if recent_avg &lt; overall_avg * 0.8:\n                # Performance declining - reduce aggressiveness\n                self.config.request_delay_ms = min(self.config.request_delay_ms * 1.2, 100)\n                self.config.concurrent_requests = max(self.config.concurrent_requests - 2, 1)\n            elif recent_avg &gt; overall_avg * 1.2:\n                # Performance improving - increase aggressiveness\n                self.config.request_delay_ms = max(self.config.request_delay_ms * 0.9, 5)\n                self.config.concurrent_requests = min(self.config.concurrent_requests + 1, 50)\n</code></pre>"},{"location":"advanced/performance/#machine-learning-optimization","title":"Machine Learning Optimization","text":"<pre><code>from sklearn.ensemble import RandomForestRegressor\nimport numpy as np\n\nclass MLPerformanceOptimizer:\n    def __init__(self):\n        self.model = RandomForestRegressor()\n        self.training_data = []\n\n    def collect_training_data(self, config, performance):\n        features = [\n            config.concurrent_requests,\n            config.request_delay_ms,\n            len(config.proxies),\n            config.start_sniping_at_seconds\n        ]\n        self.training_data.append((features, performance))\n\n    def train_model(self):\n        if len(self.training_data) &lt; 10:\n            return False\n\n        X = np.array([data[0] for data in self.training_data])\n        y = np.array([data[1] for data in self.training_data])\n\n        self.model.fit(X, y)\n        return True\n\n    def optimize_config(self, base_config):\n        if not self.train_model():\n            return base_config\n\n        # Test different configurations\n        best_config = base_config\n        best_score = 0\n\n        for concurrent in range(5, 51, 5):\n            for delay in range(5, 101, 10):\n                test_features = [concurrent, delay, len(base_config.proxies), 30]\n                predicted_performance = self.model.predict([test_features])[0]\n\n                if predicted_performance &gt; best_score:\n                    best_score = predicted_performance\n                    best_config.concurrent_requests = concurrent\n                    best_config.request_delay_ms = delay\n\n        return best_config\n</code></pre>"},{"location":"advanced/performance/#next-steps","title":"Next Steps","text":"<ul> <li>Learn troubleshooting techniques in Troubleshooting</li> <li>Understand legal considerations in Legal Notice</li> <li>Get support in Support</li> </ul>"},{"location":"advanced/troubleshooting/","title":"Troubleshooting","text":"<p>Comprehensive guide to diagnosing and fixing common issues with NameMC Sniper.</p>"},{"location":"advanced/troubleshooting/#quick-diagnosis","title":"Quick Diagnosis","text":"<p>Run these commands to quickly identify issues:</p> <pre><code># Check system status\npython Main.py version\npython Main.py config-validate\npython Main.py test-proxies\n\n# Test with dry run\npython Main.py snipe --dry-run --debug\n</code></pre>"},{"location":"advanced/troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"advanced/troubleshooting/#authentication-problems","title":"Authentication Problems","text":""},{"location":"advanced/troubleshooting/#bearer-token-is-required","title":"\"Bearer token is required\"","text":"<p>Symptoms: - Error message about missing bearer token - Authentication failures during sniping</p> <p>Causes: - Bearer token not set in config - Token expired or invalid - Incorrect token format</p> <p>Solutions:</p> <ol> <li> <p>Check token in config: <pre><code>snipe:\n  bearer_token: \"your_token_here\"  # Must not be empty\n</code></pre></p> </li> <li> <p>Validate token format: <pre><code># Token should start with \"eyJ\" and be very long\necho $MINECRAFT_BEARER_TOKEN | wc -c  # Should be 800+ characters\n</code></pre></p> </li> <li> <p>Test token validity: <pre><code>curl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n     https://api.minecraftservices.com/minecraft/profile\n</code></pre></p> </li> <li> <p>Get new token:</p> </li> <li>Follow Authentication Guide</li> <li>Tokens typically expire after 24 hours</li> </ol>"},{"location":"advanced/troubleshooting/#unauthorized-access-http-401","title":"\"Unauthorized access\" / HTTP 401","text":"<p>Symptoms: - HTTP 401 responses during sniping - \"Unauthorized\" error messages</p> <p>Causes: - Expired bearer token - Invalid token - Account doesn't own Minecraft - Token for wrong account</p> <p>Solutions:</p> <ol> <li> <p>Verify account ownership: <pre><code>curl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n     https://api.minecraftservices.com/minecraft/profile\n</code></pre>    Should return your Minecraft profile, not an error.</p> </li> <li> <p>Check token expiration: <pre><code>import jwt\nimport json\n\n# Decode token (without verification)\ntoken = \"your_bearer_token\"\ndecoded = jwt.decode(token, options={\"verify_signature\": False})\nprint(json.dumps(decoded, indent=2))\n</code></pre></p> </li> <li> <p>Refresh token:</p> </li> <li>Get a new bearer token from minecraft.net</li> <li>Update config with new token</li> </ol>"},{"location":"advanced/troubleshooting/#proxy-issues","title":"Proxy Issues","text":""},{"location":"advanced/troubleshooting/#no-working-proxies-available","title":"\"No working proxies available\"","text":"<p>Symptoms: - Error about proxy availability - All proxy tests failing - Connection timeouts</p> <p>Causes: - Proxy servers are down - Incorrect proxy format - Authentication issues - Network connectivity problems</p> <p>Solutions:</p> <ol> <li> <p>Test individual proxies: <pre><code># Test with curl\ncurl --proxy \"http://proxy:port\" \"https://api.minecraft.net/status\"\n\n# Test with authentication\ncurl --proxy \"http://user:pass@proxy:port\" \"https://api.minecraft.net/status\"\n</code></pre></p> </li> <li> <p>Check proxy format: <pre><code>proxy:\n  proxies:\n    - \"http://ip:port\"                    # Basic HTTP\n    - \"http://user:pass@ip:port\"          # With auth\n    - \"https://ip:port\"                   # HTTPS\n    - \"socks5://ip:port\"                  # SOCKS5\n</code></pre></p> </li> <li> <p>Validate proxy credentials:</p> </li> <li>Check username/password are correct</li> <li>Ensure special characters are URL-encoded</li> <li> <p>Verify proxy subscription is active</p> </li> <li> <p>Test network connectivity: <pre><code># Test direct connection\ncurl \"https://api.minecraft.net/status\"\n\n# Test DNS resolution\nnslookup api.minecraft.net\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#proxy-authentication-failed-http-407","title":"\"Proxy authentication failed\" / HTTP 407","text":"<p>Symptoms: - HTTP 407 responses - Proxy authentication errors</p> <p>Causes: - Wrong username/password - Special characters in credentials - Proxy requires different auth method</p> <p>Solutions:</p> <ol> <li> <p>URL encode credentials: <pre><code>import urllib.parse\n\nusername = urllib.parse.quote(\"user@domain.com\")\npassword = urllib.parse.quote(\"p@ssw0rd!\")\nproxy = f\"http://{username}:{password}@proxy:port\"\n</code></pre></p> </li> <li> <p>Test credentials manually: <pre><code>curl --proxy-user \"username:password\" \\\n     --proxy \"http://proxy:port\" \\\n     \"https://api.minecraft.net/status\"\n</code></pre></p> </li> <li> <p>Check proxy provider documentation:</p> </li> <li>Some providers use different auth methods</li> <li>Verify endpoint and port numbers</li> <li>Check if IP whitelisting is required</li> </ol>"},{"location":"advanced/troubleshooting/#discord-notification-issues","title":"Discord Notification Issues","text":""},{"location":"advanced/troubleshooting/#discord-notifications-not-working","title":"Discord notifications not working","text":"<p>Symptoms: - No Discord messages received - Webhook errors in logs - Bot not responding</p> <p>Causes: - Invalid webhook URL - Bot token issues - Missing permissions - Rate limiting</p> <p>Solutions:</p> <ol> <li> <p>Test webhook manually: <pre><code>curl -X POST \"YOUR_WEBHOOK_URL\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"content\": \"Test message\"}'\n</code></pre></p> </li> <li> <p>Verify webhook URL: <pre><code>discord:\n  webhook_url: \"https://discord.com/api/webhooks/ID/TOKEN\"\n  # Should be complete URL, not just ID or token\n</code></pre></p> </li> <li> <p>Check bot permissions:</p> </li> <li>Send Messages</li> <li>Embed Links</li> <li>Read Message History</li> <li> <p>Use External Emojis (if using custom emojis)</p> </li> <li> <p>Test bot token: <pre><code>import discord\n\nclient = discord.Client()\n\n@client.event\nasync def on_ready():\n    print(f'Bot logged in as {client.user}')\n    await client.close()\n\nclient.run('YOUR_BOT_TOKEN')\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#discord-rate-limited-http-429","title":"\"Discord rate limited\" / HTTP 429","text":"<p>Symptoms: - HTTP 429 responses from Discord - Delayed or missing notifications - \"Rate limited\" in logs</p> <p>Causes: - Too many messages sent too quickly - Multiple bots using same token - Global Discord rate limits</p> <p>Solutions:</p> <ol> <li> <p>Reduce notification frequency: <pre><code>notifications:\n  intervals:\n    - 3600   # Remove shorter intervals\n    - 1800\n    - 300\n    # Remove: 60, 30 second notifications\n</code></pre></p> </li> <li> <p>Implement rate limiting: <pre><code>discord:\n  rate_limit:\n    max_messages_per_minute: 5\n    burst_limit: 2\n</code></pre></p> </li> <li> <p>Use webhooks instead of bots:</p> </li> <li>Webhooks have higher rate limits</li> <li>Easier to manage</li> <li>More reliable for notifications</li> </ol>"},{"location":"advanced/troubleshooting/#network-and-performance-issues","title":"Network and Performance Issues","text":""},{"location":"advanced/troubleshooting/#connection-timeout-network-errors","title":"\"Connection timeout\" / Network errors","text":"<p>Symptoms: - Frequent connection timeouts - Network-related errors - Slow response times</p> <p>Causes: - Poor internet connection - High network latency - Firewall blocking connections - DNS resolution issues</p> <p>Solutions:</p> <ol> <li> <p>Test network connectivity: <pre><code># Test latency to Minecraft servers\nping api.minecraftservices.com\nping sessionserver.mojang.com\n\n# Test DNS resolution\nnslookup api.minecraftservices.com\n</code></pre></p> </li> <li> <p>Check firewall settings: <pre><code># Windows\nnetsh advfirewall show allprofiles\n\n# Linux\nsudo ufw status\niptables -L\n</code></pre></p> </li> <li> <p>Optimize network settings: <pre><code>proxy:\n  timeout: 15        # Increase timeout\n  max_retries: 5     # More retries\n\nsnipe:\n  request_delay_ms: 50  # Slower requests\n</code></pre></p> </li> <li> <p>Use different DNS servers: <pre><code># Use Google DNS\necho \"nameserver 8.8.8.8\" &gt; /etc/resolv.conf\necho \"nameserver 8.8.4.4\" &gt;&gt; /etc/resolv.conf\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#high-memory-usage-performance-issues","title":"High memory usage / Performance issues","text":"<p>Symptoms: - High RAM usage - Slow performance - System freezing - Out of memory errors</p> <p>Causes: - Too many concurrent requests - Memory leaks - Large log files - Insufficient system resources</p> <p>Solutions:</p> <ol> <li> <p>Reduce resource usage: <pre><code>snipe:\n  concurrent_requests: 5    # Reduce from higher values\n  max_snipe_attempts: 50    # Limit attempts\n\ndebug_mode: false           # Disable debug logging\n</code></pre></p> </li> <li> <p>Monitor system resources: <pre><code># Linux\nhtop\nfree -h\ndf -h\n\n# Windows\ntaskmgr\n</code></pre></p> </li> <li> <p>Clean up log files: <pre><code># Remove old logs\nfind logs/ -name \"*.log\" -mtime +7 -delete\n\n# Limit log file size\ntail -n 1000 large_log.log &gt; temp.log &amp;&amp; mv temp.log large_log.log\n</code></pre></p> </li> <li> <p>Optimize Python settings: <pre><code>import gc\n\n# Force garbage collection\ngc.collect()\n\n# Disable garbage collection during sniping\ngc.disable()\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"advanced/troubleshooting/#configuration-validation-failed","title":"\"Configuration validation failed\"","text":"<p>Symptoms: - Config validation errors - Invalid configuration messages - Sniper won't start</p> <p>Causes: - Syntax errors in YAML - Missing required fields - Invalid values - Incorrect data types</p> <p>Solutions:</p> <ol> <li> <p>Check YAML syntax: <pre><code># Validate YAML syntax\npython -c \"import yaml; yaml.safe_load(open('config.yaml'))\"\n</code></pre></p> </li> <li> <p>Use config validation: <pre><code>python Main.py config-validate --strict\n</code></pre></p> </li> <li> <p>Recreate config: <pre><code># Backup current config\ncp config.yaml config.yaml.backup\n\n# Create new default config\npython Main.py config-create --overwrite\n</code></pre></p> </li> <li> <p>Check required fields: <pre><code>snipe:\n  target_username: \"required\"\n  bearer_token: \"required\"\n\nproxy:\n  enabled: true  # boolean, not string\n  timeout: 10    # number, not string\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#debugging-tools","title":"Debugging Tools","text":""},{"location":"advanced/troubleshooting/#enable-debug-mode","title":"Enable Debug Mode","text":"<pre><code># Enable debug logging\npython Main.py snipe --debug\n\n# Or in config\ndebug_mode: true\nlog_level: \"DEBUG\"\n</code></pre>"},{"location":"advanced/troubleshooting/#log-analysis","title":"Log Analysis","text":"<pre><code># Search for errors in logs\ngrep -i \"error\" logs/namemc_sniper_*.log\n\n# Find authentication issues\ngrep -i \"auth\\|401\\|403\" logs/namemc_sniper_*.log\n\n# Check proxy issues\ngrep -i \"proxy\\|407\\|timeout\" logs/namemc_sniper_*.log\n\n# Monitor real-time logs\ntail -f logs/namemc_sniper_*.log\n</code></pre>"},{"location":"advanced/troubleshooting/#network-debugging","title":"Network Debugging","text":"<pre><code># Add to your debugging script\nimport requests\nimport logging\n\n# Enable requests debugging\nlogging.basicConfig(level=logging.DEBUG)\nlogging.getLogger(\"requests.packages.urllib3\").setLevel(logging.DEBUG)\nlogging.getLogger(\"urllib3.connectionpool\").setLevel(logging.DEBUG)\n\n# Test request with full debugging\nsession = requests.Session()\nresponse = session.get(\"https://api.minecraft.net/status\")\nprint(f\"Status: {response.status_code}\")\nprint(f\"Headers: {response.headers}\")\n</code></pre>"},{"location":"advanced/troubleshooting/#performance-profiling","title":"Performance Profiling","text":"<pre><code>import cProfile\nimport pstats\n\n# Profile sniper performance\ndef profile_sniper():\n    profiler = cProfile.Profile()\n    profiler.enable()\n\n    # Run sniper code here\n    run_sniper()\n\n    profiler.disable()\n\n    # Analyze results\n    stats = pstats.Stats(profiler)\n    stats.sort_stats('cumulative')\n    stats.print_stats(20)  # Top 20 functions\n\nprofile_sniper()\n</code></pre>"},{"location":"advanced/troubleshooting/#system-specific-issues","title":"System-Specific Issues","text":""},{"location":"advanced/troubleshooting/#windows-issues","title":"Windows Issues","text":""},{"location":"advanced/troubleshooting/#python-not-found-command-not-recognized","title":"\"Python not found\" / Command not recognized","text":"<p>Solutions: <pre><code># Add Python to PATH\nset PATH=%PATH%;C:\\Python39;C:\\Python39\\Scripts\n\n# Or use py launcher\npy Main.py snipe\n\n# Install Python from Microsoft Store\nwinget install Python.Python.3.9\n</code></pre></p>"},{"location":"advanced/troubleshooting/#windows-defender-blocking","title":"Windows Defender blocking","text":"<p>Solutions: 1. Add exclusion for NameMC Sniper folder 2. Temporarily disable real-time protection 3. Use Windows Security exclusions</p>"},{"location":"advanced/troubleshooting/#powershell-execution-policy","title":"PowerShell execution policy","text":"<p>Solutions: <pre><code># Allow script execution\nSet-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser\n\n# Or bypass for single command\npowershell -ExecutionPolicy Bypass -File script.ps1\n</code></pre></p>"},{"location":"advanced/troubleshooting/#linux-issues","title":"Linux Issues","text":""},{"location":"advanced/troubleshooting/#permission-denied-errors","title":"Permission denied errors","text":"<p>Solutions: <pre><code># Make script executable\nchmod +x Main.py\n\n# Install with user permissions\npip install --user -r requirements.txt\n\n# Fix ownership\nsudo chown -R $USER:$USER /path/to/namemc-sniper\n</code></pre></p>"},{"location":"advanced/troubleshooting/#missing-system-dependencies","title":"Missing system dependencies","text":"<p>Solutions: <pre><code># Ubuntu/Debian\nsudo apt update\nsudo apt install python3-dev python3-pip build-essential\n\n# CentOS/RHEL\nsudo yum install python3-devel python3-pip gcc\n\n# Alpine\napk add python3-dev py3-pip gcc musl-dev\n</code></pre></p>"},{"location":"advanced/troubleshooting/#macos-issues","title":"macOS Issues","text":""},{"location":"advanced/troubleshooting/#ssl-certificate-errors","title":"SSL certificate errors","text":"<p>Solutions: <pre><code># Update certificates\n/Applications/Python\\ 3.9/Install\\ Certificates.command\n\n# Or install certificates manually\npip install --upgrade certifi\n</code></pre></p>"},{"location":"advanced/troubleshooting/#homebrew-python-issues","title":"Homebrew Python issues","text":"<p>Solutions: <pre><code># Use system Python\n/usr/bin/python3 Main.py snipe\n\n# Or reinstall Python\nbrew reinstall python@3.9\n</code></pre></p>"},{"location":"advanced/troubleshooting/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"advanced/troubleshooting/#sniper-stuckfrozen","title":"Sniper Stuck/Frozen","text":"<ol> <li> <p>Graceful shutdown: <pre><code># Send interrupt signal\nCtrl+C\n\n# Or kill by process name\npkill -f \"python.*Main.py\"\n</code></pre></p> </li> <li> <p>Force termination: <pre><code># Find process ID\nps aux | grep \"python.*Main.py\"\n\n# Kill process\nkill -9 &lt;PID&gt;\n</code></pre></p> </li> <li> <p>Clean up resources: <pre><code># Remove lock files\nrm -f *.lock\n\n# Clear temporary files\nrm -rf /tmp/namemc-sniper-*\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#recovery-from-failed-snipe","title":"Recovery from Failed Snipe","text":"<ol> <li> <p>Analyze logs: <pre><code># Check what went wrong\ntail -n 100 logs/namemc_sniper_*.log\n</code></pre></p> </li> <li> <p>Verify username status: <pre><code># Check if username was actually claimed\ncurl \"https://api.namemc.com/profile/USERNAME\"\n</code></pre></p> </li> <li> <p>Prepare for next attempt: <pre><code># Update configuration based on failure\npython Main.py config-validate --fix\n\n# Test setup\npython Main.py snipe --dry-run\n</code></pre></p> </li> </ol>"},{"location":"advanced/troubleshooting/#getting-help","title":"Getting Help","text":""},{"location":"advanced/troubleshooting/#before-asking-for-help","title":"Before Asking for Help","text":"<ol> <li>Check logs for error messages</li> <li>Run diagnostics commands</li> <li>Search documentation for similar issues</li> <li>Try basic troubleshooting steps</li> </ol>"},{"location":"advanced/troubleshooting/#information-to-include","title":"Information to Include","text":"<p>When reporting issues, include:</p> <ul> <li>Error messages (full text)</li> <li>Log files (relevant portions)</li> <li>Configuration (sanitized, no tokens)</li> <li>System information (OS, Python version)</li> <li>Steps to reproduce the issue</li> </ul>"},{"location":"advanced/troubleshooting/#diagnostic-information-script","title":"Diagnostic Information Script","text":"<pre><code>#!/bin/bash\n# Generate diagnostic information\n\necho \"=== NameMC Sniper Diagnostics ===\"\necho \"Date: $(date)\"\necho \"System: $(uname -a)\"\necho \"Python: $(python --version)\"\necho\n\necho \"=== Configuration Status ===\"\npython Main.py config-validate\necho\n\necho \"=== Proxy Status ===\"\npython Main.py test-proxies --timeout 5\necho\n\necho \"=== Recent Logs ===\"\ntail -n 50 logs/namemc_sniper_*.log | grep -E \"(ERROR|WARN|CRITICAL)\"\necho\n\necho \"=== Network Connectivity ===\"\nping -c 3 api.minecraftservices.com\necho\n\necho \"=== System Resources ===\"\nfree -h 2&gt;/dev/null || echo \"Memory info not available\"\ndf -h . 2&gt;/dev/null || echo \"Disk info not available\"\n</code></pre>"},{"location":"advanced/troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>Review Legal Notice for compliance information</li> <li>Get additional support in Support</li> <li>Optimize performance with Performance Optimization</li> </ul>"},{"location":"getting-started/authentication/","title":"Authentication","text":"<p>Learn how to obtain and use your Minecraft bearer token for secure authentication.</p>"},{"location":"getting-started/authentication/#what-is-a-bearer-token","title":"What is a Bearer Token?","text":"<p>A bearer token is a secure authentication method that doesn't require your email and password. It's a temporary access token that grants permission to perform actions on your behalf.</p> <p>Why Bearer Tokens?</p> <ul> <li>More Secure: No need to store credentials</li> <li>Temporary: Tokens expire, limiting exposure</li> <li>Revocable: Can be invalidated if compromised</li> </ul>"},{"location":"getting-started/authentication/#method-1-browser-developer-tools","title":"Method 1: Browser Developer Tools","text":"<p>This is the most straightforward method for getting your bearer token.</p>"},{"location":"getting-started/authentication/#step-by-step-guide","title":"Step-by-Step Guide","text":"<ol> <li> <p>Open your browser and navigate to minecraft.net</p> </li> <li> <p>Log in to your Minecraft account</p> </li> <li> <p>Open Developer Tools:</p> </li> <li>Chrome/Edge: Press <code>F12</code> or <code>Ctrl+Shift+I</code></li> <li>Firefox: Press <code>F12</code> or <code>Ctrl+Shift+I</code></li> <li> <p>Safari: Press <code>Cmd+Option+I</code></p> </li> <li> <p>Go to the Network tab in Developer Tools</p> </li> <li> <p>Make a request to any Minecraft service (refresh the page or navigate to profile)</p> </li> <li> <p>Find the Authorization header:</p> </li> <li>Look for requests to <code>api.minecraftservices.com</code> or similar</li> <li>Click on a request and look for the <code>Authorization</code> header</li> <li>Copy the value after <code>Bearer</code> (without the \"Bearer \" prefix)</li> </ol>"},{"location":"getting-started/authentication/#visual-guide","title":"Visual Guide","text":"<pre><code>graph TD\n    A[Open minecraft.net] --&gt; B[Login to account]\n    B --&gt; C[Open Developer Tools F12]\n    C --&gt; D[Go to Network tab]\n    D --&gt; E[Refresh page or navigate]\n    E --&gt; F[Find API request]\n    F --&gt; G[Copy Authorization header]\n    G --&gt; H[Extract token after 'Bearer ']\n</code></pre>"},{"location":"getting-started/authentication/#method-2-authentication-libraries","title":"Method 2: Authentication Libraries","text":"<p>For more advanced users, you can use Python libraries to authenticate programmatically.</p>"},{"location":"getting-started/authentication/#using-minecraft-launcher-lib","title":"Using minecraft-launcher-lib","text":"<pre><code>import minecraft_launcher_lib\n\n# Authenticate with Microsoft account\nlogin_url, state, code_verifier = minecraft_launcher_lib.microsoft_account.get_secure_login_data()\nprint(f\"Please open this URL and login: {login_url}\")\n\n# After login, get the code from redirect URL\nauthorization_code = input(\"Enter the code from redirect URL: \")\n\n# Get access token\nlogin_data = minecraft_launcher_lib.microsoft_account.complete_login(\n    authorization_code, \n    code_verifier, \n    state\n)\n\n# Extract bearer token\nbearer_token = login_data['access_token']\nprint(f\"Bearer Token: {bearer_token}\")\n</code></pre>"},{"location":"getting-started/authentication/#installation","title":"Installation","text":"<pre><code>pip install minecraft-launcher-lib\n</code></pre>"},{"location":"getting-started/authentication/#security-best-practices","title":"Security Best Practices","text":""},{"location":"getting-started/authentication/#token-storage","title":"Token Storage","text":"<p>\u274c Don't do this: <pre><code># config.yaml - DON'T hardcode tokens\nsnipe:\n  bearer_token: \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9...\"\n</code></pre></p> <p>\u2705 Do this instead: <pre><code># config.yaml - Use environment variables\nsnipe:\n  bearer_token: \"${MINECRAFT_BEARER_TOKEN}\"\n</code></pre></p> <pre><code># Set environment variable\nexport MINECRAFT_BEARER_TOKEN=\"your_actual_token_here\"\n</code></pre>"},{"location":"getting-started/authentication/#token-management","title":"Token Management","text":"<ul> <li>Rotate regularly: Get new tokens periodically</li> <li>Monitor expiration: Tokens typically expire after 24 hours</li> <li>Secure storage: Use environment variables or secure vaults</li> <li>Never share: Keep tokens private and secure</li> </ul>"},{"location":"getting-started/authentication/#token-expiration","title":"Token Expiration","text":"<p>Bearer tokens are temporary and will expire. Common expiration times:</p> <ul> <li>Microsoft tokens: 1 hour (with refresh capability)</li> <li>Minecraft tokens: 24 hours</li> <li>Custom implementations: Varies</li> </ul>"},{"location":"getting-started/authentication/#handling-expiration","title":"Handling Expiration","text":"<pre><code># Check if token is still valid\ndef is_token_valid(token):\n    headers = {\"Authorization\": f\"Bearer {token}\"}\n    response = requests.get(\"https://api.minecraftservices.com/minecraft/profile\", headers=headers)\n    return response.status_code == 200\n\n# Refresh token if needed\nif not is_token_valid(current_token):\n    current_token = get_new_token()\n</code></pre>"},{"location":"getting-started/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/authentication/#common-issues","title":"Common Issues","text":"<p>\"Invalid bearer token\" - Token may have expired - Check for extra spaces or characters - Ensure you copied the complete token</p> <p>\"Unauthorized access\" - Verify the token is for the correct account - Check if the account owns Minecraft - Ensure proper permissions</p> <p>\"Token not found in requests\" - Clear browser cache and cookies - Try a different browser - Ensure you're logged into the correct account</p>"},{"location":"getting-started/authentication/#validation","title":"Validation","text":"<p>Test your token before using it:</p> <pre><code># Test with curl\ncurl -H \"Authorization: Bearer YOUR_TOKEN\" \\\n     https://api.minecraftservices.com/minecraft/profile\n</code></pre> <p>Expected response: <pre><code>{\n  \"id\": \"uuid-here\",\n  \"name\": \"YourMinecraftUsername\"\n}\n</code></pre></p>"},{"location":"getting-started/authentication/#important-notes","title":"Important Notes","text":"<p>Account Security</p> <ul> <li>Never share your bearer token publicly</li> <li>Revoke tokens if you suspect they're compromised</li> <li>Use 2FA on your Microsoft/Minecraft account</li> </ul> <p>Legal Compliance</p> <p>Ensure your use of bearer tokens complies with: - Minecraft Terms of Service - Microsoft Services Agreement - Applicable laws and regulations</p>"},{"location":"getting-started/authentication/#next-steps","title":"Next Steps","text":"<p>With your bearer token ready, proceed to Basic Usage to start using NameMC Sniper.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Configure NameMC Sniper for optimal performance with the <code>config.yaml</code> file.</p>"},{"location":"getting-started/configuration/#configuration-file-structure","title":"Configuration File Structure","text":"<p>The configuration file is organized into several sections:</p> <pre><code>proxy:\n  enabled: true\n  proxies:\n    - \"http://proxy1:port\"\n    - \"http://proxy2:port\"\n  rotation_enabled: true\n  timeout: 10\n  max_retries: 3\n\ndiscord:\n  enabled: true\n  webhook_url: \"https://discord.com/api/webhooks/...\"\n  bot_token: \"\"  # Optional: Use bot instead of webhook\n  channel_id: \"\"  # Required if using bot\n  mention_role_id: \"123456789\"  # Optional: Role to mention\n  embed_color: 65280\n\nsnipe:\n  target_username: \"DesiredUsername\"\n  bearer_token: \"your_minecraft_bearer_token\"\n  start_sniping_at_seconds: 30\n  max_snipe_attempts: 100\n  request_delay_ms: 25\n  concurrent_requests: 10\n  use_multiple_threads: true\n\nnotifications:\n  intervals:\n    - 86400  # 24 hours\n    - 43200  # 12 hours\n    - 21600  # 6 hours\n    - 7200   # 2 hours\n    - 3600   # 1 hour\n    - 1800   # 30 minutes\n    - 300    # 5 minutes\n    - 60     # 1 minute\n    - 30     # 30 seconds\n\ndebug_mode: false\nlog_level: \"INFO\"\n</code></pre>"},{"location":"getting-started/configuration/#configuration-sections","title":"Configuration Sections","text":""},{"location":"getting-started/configuration/#proxy-settings","title":"Proxy Settings","text":"<p>Configure proxy rotation for improved performance and reliability:</p> Setting Type Description <code>enabled</code> boolean Enable/disable proxy usage <code>proxies</code> list List of proxy URLs <code>rotation_enabled</code> boolean Enable proxy rotation <code>timeout</code> integer Proxy timeout in seconds <code>max_retries</code> integer Maximum retry attempts per proxy <p>Proxy Formats</p> <ul> <li><code>http://ip:port</code></li> <li><code>http://username:password@ip:port</code></li> <li><code>https://ip:port</code></li> <li><code>socks5://ip:port</code></li> </ul>"},{"location":"getting-started/configuration/#discord-integration","title":"Discord Integration","text":"<p>Set up Discord notifications for real-time updates:</p> Setting Type Description <code>enabled</code> boolean Enable Discord notifications <code>webhook_url</code> string Discord webhook URL (recommended) <code>bot_token</code> string Discord bot token (alternative) <code>channel_id</code> string Channel ID (required for bot) <code>mention_role_id</code> string Role ID to mention (optional) <code>embed_color</code> integer Embed color (decimal format)"},{"location":"getting-started/configuration/#snipe-settings","title":"Snipe Settings","text":"<p>Core sniping configuration:</p> Setting Type Description <code>target_username</code> string Username to snipe <code>bearer_token</code> string Minecraft bearer token <code>start_sniping_at_seconds</code> integer Seconds before drop to start <code>max_snipe_attempts</code> integer Maximum snipe attempts <code>request_delay_ms</code> integer Delay between requests (ms) <code>concurrent_requests</code> integer Number of concurrent requests <code>use_multiple_threads</code> boolean Enable multi-threading"},{"location":"getting-started/configuration/#notification-intervals","title":"Notification Intervals","text":"<p>Customize when to receive countdown notifications:</p> <pre><code>notifications:\n  intervals:\n    - 86400  # 24 hours before drop\n    - 43200  # 12 hours before drop\n    - 21600  # 6 hours before drop\n    - 7200   # 2 hours before drop\n    - 3600   # 1 hour before drop\n    - 1800   # 30 minutes before drop\n    - 300    # 5 minutes before drop\n    - 60     # 1 minute before drop\n    - 30     # 30 seconds before drop\n</code></pre>"},{"location":"getting-started/configuration/#configuration-tips","title":"Configuration Tips","text":""},{"location":"getting-started/configuration/#performance-optimization","title":"Performance Optimization","text":"<p>High-Speed Setup: <pre><code>snipe:\n  request_delay_ms: 10      # Lower delay = faster requests\n  concurrent_requests: 20   # More concurrent requests\n  use_multiple_threads: true\n</code></pre></p> <p>Conservative Setup: <pre><code>snipe:\n  request_delay_ms: 50      # Higher delay = less aggressive\n  concurrent_requests: 5    # Fewer concurrent requests\n  use_multiple_threads: false\n</code></pre></p>"},{"location":"getting-started/configuration/#proxy-recommendations","title":"Proxy Recommendations","text":"<ul> <li>Use high-quality residential proxies for best results</li> <li>Test proxies regularly with <code>python Main.py test-proxies</code></li> <li>Rotate proxies to avoid rate limiting</li> <li>Use proxies close to Minecraft servers geographically</li> </ul>"},{"location":"getting-started/configuration/#discord-setup-priority","title":"Discord Setup Priority","text":"<ol> <li>Webhook (Recommended) - Easier setup, reliable</li> <li>Bot - More features but requires more setup</li> </ol>"},{"location":"getting-started/configuration/#important-notes","title":"Important Notes","text":"<p>Bearer Token Security</p> <p>Never share your bearer token or commit it to version control. Consider using environment variables:</p> <pre><code>snipe:\n  bearer_token: \"${MINECRAFT_BEARER_TOKEN}\"\n</code></pre> <p>Rate Limiting</p> <p>Be careful with aggressive settings. Too many requests too quickly may result in rate limiting or IP bans.</p>"},{"location":"getting-started/configuration/#validation","title":"Validation","text":"<p>Always validate your configuration after making changes:</p> <pre><code>python Main.py config-validate\n</code></pre>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>Once configured, learn how to get your bearer token in the Authentication guide.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you install NameMC Sniper and its dependencies on your system.</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python: 3.8 or higher</li> <li>Operating System: Windows, macOS, or Linux</li> <li>Network: Stable internet connection</li> <li>Memory: At least 512MB RAM available</li> </ul>"},{"location":"getting-started/installation/#installation-steps","title":"Installation Steps","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone &lt;repository-url&gt;\ncd NameMcSniper\n</code></pre> <p>Repository URL</p> <p>Replace <code>&lt;repository-url&gt;</code> with the actual repository URL where NameMC Sniper is hosted.</p>"},{"location":"getting-started/installation/#2-install-python-dependencies","title":"2. Install Python Dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre> <p>Virtual Environment (Recommended)</p> <p>It's recommended to use a virtual environment to avoid conflicts with other Python packages:</p> <pre><code># Create virtual environment\npython -m venv namemc-sniper-env\n\n# Activate virtual environment\n# On Windows:\nnamemc-sniper-env\\Scripts\\activate\n# On macOS/Linux:\nsource namemc-sniper-env/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#3-verify-installation","title":"3. Verify Installation","text":"<p>Test that the installation was successful:</p> <pre><code>python Main.py --help\n</code></pre> <p>You should see the help menu with available commands.</p>"},{"location":"getting-started/installation/#4-create-initial-configuration","title":"4. Create Initial Configuration","text":"<p>Generate the default configuration file:</p> <pre><code>python Main.py config-create\n</code></pre> <p>This will create a <code>config.yaml</code> file in your project directory.</p>"},{"location":"getting-started/installation/#dependencies","title":"Dependencies","text":"<p>The main dependencies include:</p> <ul> <li>requests - HTTP library for API calls</li> <li>pyyaml - YAML configuration file support</li> <li>rich - Beautiful terminal output</li> <li>discord.py - Discord bot integration (optional)</li> <li>schedule - Task scheduling</li> <li>colorama - Cross-platform colored terminal text</li> </ul>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>To ensure everything is working correctly:</p> <ol> <li> <p>Check version:    <pre><code>python Main.py version\n</code></pre></p> </li> <li> <p>Validate configuration:    <pre><code>python Main.py config-validate\n</code></pre></p> </li> <li> <p>Test proxy connections (if using proxies):    <pre><code>python Main.py test-proxies\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"<p>Python not found <pre><code># Make sure Python is in your PATH\npython --version\n# or try\npython3 --version\n</code></pre></p> <p>Permission errors <pre><code># On Windows, run as administrator\n# On macOS/Linux, use sudo if needed\nsudo pip install -r requirements.txt\n</code></pre></p> <p>Module not found errors <pre><code># Ensure you're in the correct directory\nls -la  # Should show Main.py and requirements.txt\n# Reinstall dependencies\npip install -r requirements.txt --force-reinstall\n</code></pre></p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete, proceed to Configuration to set up your sniper settings.</p>"},{"location":"legal/legal-notice/","title":"Legal Notice","text":"<p>Important legal information and compliance guidelines for using NameMC Sniper.</p>"},{"location":"legal/legal-notice/#disclaimer","title":"Disclaimer","text":"<p>NameMC Sniper is provided for educational purposes only. The authors and contributors are not responsible for any consequences resulting from the use of this software. Users must comply with all applicable terms of service and laws.</p>"},{"location":"legal/legal-notice/#terms-of-service-compliance","title":"Terms of Service Compliance","text":""},{"location":"legal/legal-notice/#minecraft-terms-of-service","title":"Minecraft Terms of Service","text":"<p>When using NameMC Sniper, you must comply with:</p> <ul> <li>Minecraft End User License Agreement (EULA)</li> <li>Microsoft Services Agreement</li> <li>Minecraft Usage Guidelines</li> </ul>"},{"location":"legal/legal-notice/#key-requirements","title":"Key Requirements","text":"<ol> <li>Account Ownership: Only attempt to claim usernames for accounts you own</li> <li>Rate Limiting: Respect API rate limits and usage policies</li> <li>Fair Use: Use the software responsibly and ethically</li> <li>No Automation Abuse: Don't use the software to violate automation policies</li> </ol>"},{"location":"legal/legal-notice/#prohibited-uses","title":"Prohibited Uses","text":"<p>Do NOT use NameMC Sniper for:</p> <ul> <li> Claiming usernames for accounts you don't own</li> <li> Commercial username trading or selling</li> <li> Harassment or impersonation</li> <li> Circumventing security measures</li> <li> Violating rate limits or API terms</li> <li> Any illegal activities</li> </ul>"},{"location":"legal/legal-notice/#legal-responsibilities","title":"Legal Responsibilities","text":""},{"location":"legal/legal-notice/#user-responsibilities","title":"User Responsibilities","text":"<p>As a user of NameMC Sniper, you are responsible for:</p> <ol> <li>Compliance: Ensuring your use complies with all applicable laws and terms of service</li> <li>Account Security: Protecting your authentication credentials</li> <li>Ethical Use: Using the software responsibly and ethically</li> <li>Consequences: Any outcomes resulting from your use of the software</li> </ol>"},{"location":"legal/legal-notice/#liability-limitations","title":"Liability Limitations","text":"<p>The NameMC Sniper project and its contributors:</p> <ul> <li>Provide no warranties express or implied</li> <li>Accept no liability for damages or consequences</li> <li>Make no guarantees about software functionality or success rates</li> <li>Are not responsible for user compliance with terms of service</li> </ul>"},{"location":"legal/legal-notice/#jurisdiction-and-applicable-law","title":"Jurisdiction and Applicable Law","text":"<p>This software is distributed internationally. Users must comply with:</p> <ul> <li>Local laws in their jurisdiction</li> <li>International laws that may apply</li> <li>Platform-specific terms (Minecraft, Discord, etc.)</li> <li>Proxy provider terms if using proxy services</li> </ul>"},{"location":"legal/legal-notice/#regional-considerations","title":"Regional Considerations","text":"<p>United States: - Computer Fraud and Abuse Act (CFAA) compliance - Digital Millennium Copyright Act (DMCA) considerations - State-specific computer crime laws</p> <p>European Union: - General Data Protection Regulation (GDPR) compliance - Computer crime directives - Data processing regulations</p> <p>Other Jurisdictions: - Local computer crime and cybersecurity laws - Data protection and privacy regulations - Terms of service enforcement laws</p>"},{"location":"legal/legal-notice/#privacy-and-data-protection","title":"Privacy and Data Protection","text":""},{"location":"legal/legal-notice/#data-collection","title":"Data Collection","text":"<p>NameMC Sniper may collect or process:</p> <ul> <li>Configuration data (usernames, settings)</li> <li>Log data (timestamps, errors, performance metrics)</li> <li>Network data (IP addresses when using proxies)</li> <li>Authentication tokens (stored locally)</li> </ul>"},{"location":"legal/legal-notice/#data-usage","title":"Data Usage","text":"<p>Collected data is used only for:</p> <ul> <li>Software functionality (sniping, notifications)</li> <li>Error diagnosis (troubleshooting, debugging)</li> <li>Performance optimization (metrics, analytics)</li> </ul>"},{"location":"legal/legal-notice/#data-protection","title":"Data Protection","text":"<p>Users should:</p> <ul> <li>Secure configuration files containing sensitive data</li> <li>Protect authentication tokens from unauthorized access</li> <li>Use secure networks when operating the software</li> <li>Regularly rotate credentials for security</li> </ul>"},{"location":"legal/legal-notice/#security-considerations","title":"Security Considerations","text":""},{"location":"legal/legal-notice/#authentication-security","title":"Authentication Security","text":"<ul> <li>Bearer tokens are sensitive credentials</li> <li>Never share tokens publicly or in version control</li> <li>Use environment variables for token storage</li> <li>Rotate tokens regularly for security</li> </ul>"},{"location":"legal/legal-notice/#network-security","title":"Network Security","text":"<ul> <li>Use HTTPS proxies when possible</li> <li>Verify proxy providers are trustworthy</li> <li>Monitor for data leaks in network traffic</li> <li>Use VPNs for additional privacy if needed</li> </ul>"},{"location":"legal/legal-notice/#system-security","title":"System Security","text":"<ul> <li>Keep software updated with latest security patches</li> <li>Use antivirus software on your system</li> <li>Monitor system logs for unusual activity</li> <li>Limit access to NameMC Sniper files and logs</li> </ul>"},{"location":"legal/legal-notice/#ethical-guidelines","title":"Ethical Guidelines","text":""},{"location":"legal/legal-notice/#responsible-use","title":"Responsible Use","text":"<p>Do: -  Use for legitimate username changes on your own accounts -  Respect rate limits and API guidelines -  Be transparent about your use of automation tools -  Help improve the software through responsible reporting</p> <p>Don't: -  Use for harassment, impersonation, or malicious purposes -  Attempt to circumvent security measures or rate limits -  Share authentication credentials or tokens -  Use for commercial username trading without proper authorization</p>"},{"location":"legal/legal-notice/#community-standards","title":"Community Standards","text":"<ul> <li>Be respectful to other users and the Minecraft community</li> <li>Follow platform rules on Discord, GitHub, and other platforms</li> <li>Report issues responsibly through appropriate channels</li> <li>Contribute positively to the project and community</li> </ul>"},{"location":"legal/legal-notice/#license-information","title":"License Information","text":"<p>NameMC Sniper is distributed under the MIT License.</p>"},{"location":"legal/legal-notice/#mit-license-summary","title":"MIT License Summary","text":"<p>Permissions: - Commercial use - Distribution - Modification - Private use</p> <p>Conditions: - License and copyright notice must be included</p> <p>Limitations: - No liability - No warranty</p>"},{"location":"legal/legal-notice/#full-license-text","title":"Full License Text","text":"<pre><code>MIT License\n\nCopyright (c) 2024 NameMC Sniper Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"legal/legal-notice/#risk-acknowledgment","title":"Risk Acknowledgment","text":"<p>By using NameMC Sniper, you acknowledge and accept the following risks:</p>"},{"location":"legal/legal-notice/#technical-risks","title":"Technical Risks","text":"<ul> <li>Software bugs may cause unexpected behavior</li> <li>Network issues may affect functionality</li> <li>API changes may break compatibility</li> <li>Security vulnerabilities may exist</li> </ul>"},{"location":"legal/legal-notice/#legal-risks","title":"Legal Risks","text":"<ul> <li>Terms of service violations may result in account penalties</li> <li>Legal action may be taken for misuse</li> <li>Regulatory compliance issues may arise</li> <li>Liability exposure for damages or consequences</li> </ul>"},{"location":"legal/legal-notice/#operational-risks","title":"Operational Risks","text":"<ul> <li>Failed snipe attempts despite proper configuration</li> <li>Account restrictions from platform providers</li> <li>Proxy service issues affecting functionality</li> <li>Data loss or corruption</li> </ul>"},{"location":"legal/legal-notice/#additional-resources","title":"Additional Resources","text":""},{"location":"legal/legal-notice/#official-documentation","title":"Official Documentation","text":"<ul> <li>Minecraft EULA</li> <li>Microsoft Services Agreement</li> <li>Discord Terms of Service</li> </ul>"},{"location":"legal/legal-notice/#legal-resources","title":"Legal Resources","text":"<ul> <li>Electronic Frontier Foundation - Digital rights information</li> <li>Creative Commons - Licensing information</li> <li>Open Source Initiative - Open source licensing</li> </ul>"},{"location":"legal/legal-notice/#security-resources","title":"Security Resources","text":"<ul> <li>OWASP - Web application security</li> <li>SANS - Information security training</li> <li>CVE Database - Security vulnerability database</li> </ul>"},{"location":"legal/legal-notice/#legal-contact","title":"Legal Contact","text":"<p>For legal inquiries or concerns:</p> <ol> <li>Review this documentation thoroughly</li> <li>Consult with legal counsel if needed</li> <li>Contact project maintainers through official channels</li> <li>Report security issues responsibly</li> </ol> <p>Note: Project maintainers are not legal advisors. Seek professional legal counsel for specific legal questions.</p> <p>Last Updated: 2024-01-15 Version: 1.0</p> <p>Remember: This software is provided as-is for educational purposes. Always comply with applicable laws and terms of service. Use responsibly and ethically.</p>"},{"location":"legal/support/","title":"Support","text":"<p>Get help with NameMC Sniper through various support channels and resources.</p>"},{"location":"legal/support/#getting-help","title":"Getting Help","text":""},{"location":"legal/support/#before-seeking-support","title":"Before Seeking Support","text":"<ol> <li>Check the documentation - Most issues are covered in this guide</li> <li>Search existing issues - Your problem might already be solved</li> <li>Run diagnostics - Use built-in troubleshooting tools</li> <li>Try basic fixes - Follow the troubleshooting guide</li> </ol>"},{"location":"legal/support/#self-help-resources","title":"Self-Help Resources","text":"<ul> <li>Troubleshooting Guide - Common issues and solutions</li> <li>Configuration Guide - Setup and configuration help</li> <li>Performance Optimization - Improve sniper performance</li> <li>Command Reference - Complete command documentation</li> </ul>"},{"location":"legal/support/#support-channels","title":"Support Channels","text":""},{"location":"legal/support/#github-issues-primary","title":"GitHub Issues (Primary)","text":"<p>Best for: - Bug reports - Feature requests - Technical issues - Documentation improvements</p> <p>How to use: 1. Go to the GitHub repository 2. Click \"Issues\" tab 3. Search existing issues first 4. Create new issue if needed</p> <p>Issue Templates:</p> <pre><code>## Bug Report\n\n**Describe the bug**\nA clear description of what the bug is.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Go to '...'\n2. Click on '....'\n3. See error\n\n**Expected behavior**\nWhat you expected to happen.\n\n**Environment:**\n- OS: [e.g. Windows 10, Ubuntu 20.04]\n- Python version: [e.g. 3.9.0]\n- NameMC Sniper version: [e.g. 1.0.0]\n\n**Configuration:**\n```yaml\n# Your config (remove sensitive data)\n</code></pre> <p>Logs: <pre><code># Relevant log entries\n</code></pre> <pre><code>### Discord Community (Secondary)\n\n**Best for:**\n- General questions\n- Community discussions\n- Quick help\n- Sharing experiences\n\n**Join the community:**\n- Discord Server: [Invite Link]\n- Channel: #namemc-sniper-support\n\n**Community Guidelines:**\n- Be respectful and helpful\n- Search previous messages before asking\n- Use appropriate channels\n- No sharing of bearer tokens or credentials\n\n### Reddit Community\n\n**Best for:**\n- Discussions\n- Tips and tricks\n- Community experiences\n- General questions\n\n**Subreddit:** r/NameMCSniper (if available)\n\n## :bug: Reporting Bugs\n\n### Bug Report Checklist\n\nBefore reporting a bug:\n\n- [ ] Update to the latest version\n- [ ] Check if the issue is already reported\n- [ ] Reproduce the issue consistently\n- [ ] Gather relevant information\n\n### Information to Include\n\n**System Information:**\n```bash\n# Run this command and include output\npython Main.py version --detailed\n</code></pre></p> <p>Configuration: <pre><code># Your config.yaml (remove bearer_token and other sensitive data)\n</code></pre></p> <p>Error Logs: <pre><code># Include relevant log entries\ntail -n 50 logs/namemc_sniper_*.log\n</code></pre></p> <p>Steps to Reproduce: 1. Detailed step-by-step instructions 2. Expected vs actual behavior 3. Screenshots if applicable</p>"},{"location":"legal/support/#security-issues","title":"Security Issues","text":"<p>For security vulnerabilities:</p> <ol> <li>DO NOT create public issues</li> <li>Email directly to: security@namemc-sniper.example.com</li> <li>Include details about the vulnerability</li> <li>Wait for response before public disclosure</li> </ol> <p>Security report template: <pre><code>Subject: [SECURITY] Vulnerability in NameMC Sniper\n\nDescription: [Detailed description of the vulnerability]\nImpact: [Potential impact and severity]\nReproduction: [Steps to reproduce]\nSuggested Fix: [If you have suggestions]\n</code></pre></p>"},{"location":"legal/support/#feature-requests","title":"Feature Requests","text":""},{"location":"legal/support/#before-requesting-features","title":"Before Requesting Features","text":"<ul> <li>Check if the feature already exists</li> <li>Search existing feature requests</li> <li>Consider if it fits the project scope</li> <li>Think about implementation complexity</li> </ul>"},{"location":"legal/support/#feature-request-template","title":"Feature Request Template","text":"<pre><code>## Feature Request\n\n**Is your feature request related to a problem?**\nA clear description of what the problem is.\n\n**Describe the solution you'd like**\nA clear description of what you want to happen.\n\n**Describe alternatives you've considered**\nOther solutions you've thought about.\n\n**Additional context**\nScreenshots, mockups, or examples.\n\n**Implementation ideas**\nIf you have technical suggestions.\n</code></pre>"},{"location":"legal/support/#feature-prioritization","title":"Feature Prioritization","text":"<p>Features are prioritized based on:</p> <ol> <li>User demand - How many users want it</li> <li>Project alignment - Fits project goals</li> <li>Implementation effort - Development complexity</li> <li>Maintenance burden - Long-term support needs</li> </ol>"},{"location":"legal/support/#contributing","title":"Contributing","text":""},{"location":"legal/support/#ways-to-contribute","title":"Ways to Contribute","text":"<p>Code Contributions: - Bug fixes - New features - Performance improvements - Code refactoring</p> <p>Documentation: - Fix typos and errors - Add examples - Improve explanations - Translate content</p> <p>Testing: - Test new releases - Report bugs - Verify fixes - Performance testing</p> <p>Community: - Help other users - Answer questions - Share experiences - Create tutorials</p>"},{"location":"legal/support/#development-setup","title":"Development Setup","text":"<pre><code># Clone the repository\ngit clone https://github.com/your-username/NameMcSniper.git\ncd NameMcSniper\n\n# Create virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install development dependencies\npip install -r requirements-dev.txt\n\n# Install pre-commit hooks\npre-commit install\n\n# Run tests\npython -m pytest\n</code></pre>"},{"location":"legal/support/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create feature branch (<code>git checkout -b feature/amazing-feature</code>)</li> <li>Make changes with clear, focused commits</li> <li>Add tests for new functionality</li> <li>Update documentation if needed</li> <li>Run tests and ensure they pass</li> <li>Submit pull request with clear description</li> </ol>"},{"location":"legal/support/#code-standards","title":"Code Standards","text":"<ul> <li>Follow PEP 8 Python style guide</li> <li>Write tests for new code</li> <li>Document functions with docstrings</li> <li>Use type hints where appropriate</li> <li>Keep commits atomic and well-described</li> </ul>"},{"location":"legal/support/#documentation","title":"Documentation","text":""},{"location":"legal/support/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md                    # Home page\n\u251c\u2500\u2500 getting-started/           # Setup and configuration\n\u251c\u2500\u2500 usage/                     # User guides\n\u251c\u2500\u2500 advanced/                  # Advanced topics\n\u2514\u2500\u2500 legal/                     # Legal and support\n</code></pre>"},{"location":"legal/support/#improving-documentation","title":"Improving Documentation","text":"<p>How to contribute: 1. Identify areas for improvement 2. Fork the documentation repository 3. Make changes in Markdown files 4. Submit pull request</p> <p>Documentation standards: - Clear, concise writing - Step-by-step instructions - Code examples - Screenshots where helpful - Consistent formatting</p>"},{"location":"legal/support/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":""},{"location":"legal/support/#testing-levels","title":"Testing Levels","text":"<p>Unit Tests: - Individual function testing - Mock external dependencies - Fast execution</p> <p>Integration Tests: - Component interaction testing - Real API calls (with test data) - Proxy testing</p> <p>End-to-End Tests: - Full workflow testing - Real-world scenarios - Performance testing</p>"},{"location":"legal/support/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npython -m pytest\n\n# Run specific test file\npython -m pytest tests/test_sniper.py\n\n# Run with coverage\npython -m pytest --cov=namemc_sniper\n\n# Run performance tests\npython -m pytest tests/performance/\n</code></pre>"},{"location":"legal/support/#project-status","title":"Project Status","text":""},{"location":"legal/support/#current-status","title":"Current Status","text":"<ul> <li>Version: 1.0.0</li> <li>Status: Active development</li> <li>Python Support: 3.8+</li> <li>Platform Support: Windows, macOS, Linux</li> </ul>"},{"location":"legal/support/#roadmap","title":"Roadmap","text":"<p>Short-term (Next Release): - [ ] Improved error handling - [ ] Better proxy management - [ ] Enhanced Discord notifications - [ ] Performance optimizations</p> <p>Medium-term (Future Releases): - [ ] Web interface - [ ] Multiple username support - [ ] Advanced scheduling - [ ] Statistics dashboard</p> <p>Long-term (Future Versions): - [ ] Plugin system - [ ] Cloud deployment options - [ ] Mobile app - [ ] Advanced analytics</p>"},{"location":"legal/support/#release-schedule","title":"Release Schedule","text":"<ul> <li>Major releases: Every 6 months</li> <li>Minor releases: Monthly</li> <li>Patch releases: As needed for critical bugs</li> <li>Security updates: Immediate</li> </ul>"},{"location":"legal/support/#support-limitations","title":"Support Limitations","text":""},{"location":"legal/support/#what-we-can-help-with","title":"What We Can Help With","text":"<ul> <li>Software bugs and technical issues</li> <li>Configuration problems and setup help</li> <li>Performance optimization guidance</li> <li>Documentation improvements</li> </ul>"},{"location":"legal/support/#what-we-cannot-help-with","title":"What We Cannot Help With","text":"<ul> <li>Legal advice - Consult a lawyer</li> <li>Account recovery - Contact Minecraft support</li> <li>Proxy services - Contact your proxy provider</li> <li>Discord issues - Contact Discord support</li> <li>Minecraft server issues - Contact server administrators</li> </ul>"},{"location":"legal/support/#response-times","title":"Response Times","text":"<p>GitHub Issues: - Bug reports: 1-3 business days - Feature requests: 1 week - Security issues: 24 hours</p> <p>Discord/Community: - General questions: Community-driven (varies) - Urgent issues: Tag moderators</p> <p>Note: These are target response times. Actual response may vary based on complexity and maintainer availability.</p>"},{"location":"legal/support/#acknowledgments","title":"Acknowledgments","text":""},{"location":"legal/support/#contributors","title":"Contributors","text":"<p>Thank you to all contributors who have helped improve NameMC Sniper:</p> <ul> <li>Core Developers - Main codebase development</li> <li>Documentation Team - Writing and maintaining docs</li> <li>Community Moderators - Managing support channels</li> <li>Beta Testers - Testing new features and releases</li> <li>Bug Reporters - Identifying and reporting issues</li> </ul>"},{"location":"legal/support/#special-thanks","title":"Special Thanks","text":"<ul> <li>Minecraft Community - For the inspiration and feedback</li> <li>Open Source Projects - Dependencies and tools we use</li> <li>Proxy Providers - Testing and integration support</li> <li>Discord Community - Active support and discussions</li> </ul>"},{"location":"legal/support/#donations-and-sponsorship","title":"Donations and Sponsorship","text":"<p>If you find NameMC Sniper useful, consider supporting the project:</p> <ul> <li>GitHub Sponsors - [Sponsor Link]</li> <li>PayPal - [PayPal Link]</li> <li>Cryptocurrency - [Wallet Addresses]</li> </ul> <p>Funds are used for: - Development time - Server costs - Testing resources - Community events</p> <p>Need immediate help? Start with the Troubleshooting Guide or search existing issues on GitHub.</p>"},{"location":"usage/basic-usage/","title":"Basic Usage","text":"<p>Learn the essential commands and workflows for using NameMC Sniper effectively.</p>"},{"location":"usage/basic-usage/#quick-start","title":"Quick Start","text":"<p>The most basic way to start sniping:</p> <pre><code>python Main.py snipe -u \"DesiredUsername\" -t \"your_bearer_token\"\n</code></pre>"},{"location":"usage/basic-usage/#command-structure","title":"Command Structure","text":"<p>All NameMC Sniper commands follow this pattern:</p> <pre><code>python Main.py [COMMAND] [OPTIONS]\n</code></pre>"},{"location":"usage/basic-usage/#essential-commands","title":"Essential Commands","text":""},{"location":"usage/basic-usage/#start-sniping","title":"Start Sniping","text":"<p>With config file: <pre><code># Uses settings from config.yaml\npython Main.py snipe\n</code></pre></p> <p>With command line options: <pre><code># Override config with CLI arguments\npython Main.py snipe -u \"Username\" -t \"bearer_token\"\n</code></pre></p> <p>With custom config: <pre><code># Use a different config file\npython Main.py snipe -c \"custom_config.yaml\"\n</code></pre></p>"},{"location":"usage/basic-usage/#configuration-management","title":"Configuration Management","text":"<p>Create default configuration: <pre><code>python Main.py config-create\n</code></pre></p> <p>Validate configuration: <pre><code>python Main.py config-validate\n</code></pre></p> <p>Test proxy connections: <pre><code>python Main.py test-proxies\n</code></pre></p>"},{"location":"usage/basic-usage/#information-commands","title":"Information Commands","text":"<p>Show help: <pre><code>python Main.py --help\n</code></pre></p> <p>Show version: <pre><code>python Main.py version\n</code></pre></p>"},{"location":"usage/basic-usage/#workflow-typical-workflow","title":":workflow: Typical Workflow","text":""},{"location":"usage/basic-usage/#1-initial-setup","title":"1. Initial Setup","text":"<pre><code># Create configuration\npython Main.py config-create\n\n# Edit config.yaml with your settings\n# (See Configuration guide for details)\n\n# Validate configuration\npython Main.py config-validate\n</code></pre>"},{"location":"usage/basic-usage/#2-test-your-setup","title":"2. Test Your Setup","text":"<pre><code># Test proxy connections (if using proxies)\npython Main.py test-proxies\n\n# Verify bearer token works\npython Main.py snipe --dry-run\n</code></pre>"},{"location":"usage/basic-usage/#3-start-monitoring","title":"3. Start Monitoring","text":"<pre><code># Start the sniper\npython Main.py snipe -u \"TargetUsername\"\n</code></pre>"},{"location":"usage/basic-usage/#what-happens-when-you-run","title":"What Happens When You Run","text":"<p>When you start sniping, NameMC Sniper will:</p> <ol> <li>Load Configuration - Read settings from config file</li> <li>Validate Setup - Check bearer token, proxies, Discord webhook</li> <li>Schedule Notifications - Set up countdown alerts</li> <li>Monitor Drop Time - Wait for the username to become available</li> <li>Start Sniping - Begin high-speed claiming attempts</li> <li>Report Results - Send success/failure notifications</li> </ol>"},{"location":"usage/basic-usage/#monitoring-progress","title":"Monitoring Progress","text":""},{"location":"usage/basic-usage/#console-output","title":"Console Output","text":"<p>The sniper provides real-time feedback:</p> <pre><code>[INFO] Starting NameMC Sniper v1.0.0\n[INFO] Target username: ExampleUser\n[INFO] Drop time: 2024-01-15 14:30:00 UTC\n[INFO] Notifications scheduled: 8 intervals\n[INFO] Proxies loaded: 5 working proxies\n[INFO] Discord webhook: Connected\n[INFO] Waiting for drop time...\n[NOTIFICATION] 24 hours until drop\n[NOTIFICATION] 12 hours until drop\n...\n[SNIPE] Starting snipe attempts (30s before drop)\n[SUCCESS] Username claimed successfully!\n</code></pre>"},{"location":"usage/basic-usage/#log-files","title":"Log Files","text":"<p>Detailed logs are saved to: <pre><code>logs/namemc_sniper_YYYYMMDD_HHMMSS.log\n</code></pre></p>"},{"location":"usage/basic-usage/#command-options","title":"Command Options","text":""},{"location":"usage/basic-usage/#global-options","title":"Global Options","text":"Option Description Example <code>--help</code> Show help message <code>python Main.py --help</code> <code>--version</code> Show version info <code>python Main.py --version</code> <code>--config</code> Custom config file <code>python Main.py --config custom.yaml</code>"},{"location":"usage/basic-usage/#snipe-command-options","title":"Snipe Command Options","text":"Option Short Description Example <code>--username</code> <code>-u</code> Target username <code>-u \"DesiredName\"</code> <code>--token</code> <code>-t</code> Bearer token <code>-t \"eyJ0eXAi...\"</code> <code>--config</code> <code>-c</code> Config file path <code>-c \"config.yaml\"</code> <code>--dry-run</code> Test without sniping <code>--dry-run</code> <code>--debug</code> Enable debug mode <code>--debug</code>"},{"location":"usage/basic-usage/#pro-tips","title":"Pro Tips","text":""},{"location":"usage/basic-usage/#timing-your-snipe","title":"Timing Your Snipe","text":"<ul> <li>Start early: Begin monitoring 24+ hours before drop</li> <li>Test first: Use <code>--dry-run</code> to verify setup</li> <li>Check timezone: Ensure drop time is in correct timezone</li> </ul>"},{"location":"usage/basic-usage/#optimizing-performance","title":"Optimizing Performance","text":"<ul> <li>Use proxies: Rotate through multiple high-quality proxies</li> <li>Tune settings: Adjust <code>request_delay_ms</code> and <code>concurrent_requests</code></li> <li>Monitor logs: Watch for rate limiting or errors</li> </ul>"},{"location":"usage/basic-usage/#discord-integration","title":"Discord Integration","text":"<ul> <li>Test webhook: Send a test message before the drop</li> <li>Set role mentions: Get notified immediately on mobile</li> <li>Use embeds: Rich formatting for better visibility</li> </ul>"},{"location":"usage/basic-usage/#common-mistakes","title":"Common Mistakes","text":"<p>\u274c Starting too late <pre><code># Don't wait until the last minute\npython Main.py snipe  # Started 5 minutes before drop\n</code></pre></p> <p>\u2705 Start monitoring early <pre><code># Start 24+ hours early for notifications\npython Main.py snipe  # Started 1 day before drop\n</code></pre></p> <p>\u274c Not testing setup <pre><code># Don't skip validation\npython Main.py snipe  # Untested configuration\n</code></pre></p> <p>\u2705 Always validate first <pre><code># Test everything before the drop\npython Main.py config-validate\npython Main.py test-proxies\npython Main.py snipe --dry-run\n</code></pre></p>"},{"location":"usage/basic-usage/#troubleshooting-quick-fixes","title":"Troubleshooting Quick Fixes","text":"<p>Command not found: <pre><code># Make sure you're in the right directory\ncd /path/to/NameMcSniper\npython Main.py --help\n</code></pre></p> <p>Config file not found: <pre><code># Create default config first\npython Main.py config-create\n</code></pre></p> <p>Bearer token errors: <pre><code># Verify token is valid\npython Main.py snipe --dry-run\n</code></pre></p>"},{"location":"usage/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Learn all available commands in Command Reference</li> <li>Set up Discord notifications in Discord Setup</li> <li>Configure proxies in Proxy Setup</li> </ul>"},{"location":"usage/commands/","title":"Command Reference","text":"<p>Complete reference for all NameMC Sniper commands and options.</p>"},{"location":"usage/commands/#command-syntax","title":"Command Syntax","text":"<pre><code>python Main.py [COMMAND] [OPTIONS]\n</code></pre>"},{"location":"usage/commands/#core-commands","title":"Core Commands","text":""},{"location":"usage/commands/#snipe","title":"<code>snipe</code>","text":"<p>Start the username sniping process.</p> <pre><code>python Main.py snipe [OPTIONS]\n</code></pre> <p>Options:</p> Option Short Type Description Default <code>--username</code> <code>-u</code> string Target username to snipe From config <code>--token</code> <code>-t</code> string Minecraft bearer token From config <code>--config</code> <code>-c</code> string Path to config file <code>config.yaml</code> <code>--dry-run</code> flag Test mode without actual sniping False <code>--debug</code> flag Enable debug logging False <code>--no-notifications</code> flag Disable Discord notifications False <code>--start-immediately</code> flag Skip waiting, start sniping now False <p>Examples:</p> <pre><code># Basic snipe with config file\npython Main.py snipe\n\n# Override username and token\npython Main.py snipe -u \"NewUsername\" -t \"eyJ0eXAi...\"\n\n# Test run without actual sniping\npython Main.py snipe --dry-run\n\n# Use custom config file\npython Main.py snipe -c \"production.yaml\"\n\n# Debug mode with immediate start\npython Main.py snipe --debug --start-immediately\n</code></pre>"},{"location":"usage/commands/#config-create","title":"<code>config-create</code>","text":"<p>Create a default configuration file.</p> <pre><code>python Main.py config-create [OPTIONS]\n</code></pre> <p>Options:</p> Option Short Type Description Default <code>--output</code> <code>-o</code> string Output file path <code>config.yaml</code> <code>--overwrite</code> flag Overwrite existing file False <code>--template</code> <code>-t</code> string Template type <code>default</code> <p>Examples:</p> <pre><code># Create default config\npython Main.py config-create\n\n# Create with custom name\npython Main.py config-create -o \"my-config.yaml\"\n\n# Overwrite existing config\npython Main.py config-create --overwrite\n\n# Create from template\npython Main.py config-create -t \"high-performance\"\n</code></pre>"},{"location":"usage/commands/#config-validate","title":"<code>config-validate</code>","text":"<p>Validate configuration file settings.</p> <pre><code>python Main.py config-validate [OPTIONS]\n</code></pre> <p>Options:</p> Option Short Type Description Default <code>--config</code> <code>-c</code> string Config file to validate <code>config.yaml</code> <code>--strict</code> flag Enable strict validation False <code>--fix</code> flag Attempt to fix issues False <p>Examples:</p> <pre><code># Validate default config\npython Main.py config-validate\n\n# Validate custom config\npython Main.py config-validate -c \"custom.yaml\"\n\n# Strict validation with auto-fix\npython Main.py config-validate --strict --fix\n</code></pre>"},{"location":"usage/commands/#test-proxies","title":"<code>test-proxies</code>","text":"<p>Test proxy connections and performance.</p> <pre><code>python Main.py test-proxies [OPTIONS]\n</code></pre> <p>Options:</p> Option Short Type Description Default <code>--config</code> <code>-c</code> string Config file with proxy settings <code>config.yaml</code> <code>--timeout</code> <code>-t</code> integer Test timeout in seconds 10 <code>--verbose</code> <code>-v</code> flag Show detailed test results False <code>--export</code> <code>-e</code> string Export results to file None <p>Examples:</p> <pre><code># Test all proxies from config\npython Main.py test-proxies\n\n# Test with custom timeout\npython Main.py test-proxies -t 5\n\n# Verbose output with export\npython Main.py test-proxies -v -e \"proxy-test-results.json\"\n</code></pre>"},{"location":"usage/commands/#information-commands","title":"Information Commands","text":""},{"location":"usage/commands/#version","title":"<code>version</code>","text":"<p>Display version information.</p> <pre><code>python Main.py version [OPTIONS]\n</code></pre> <p>Options:</p> Option Short Type Description <code>--detailed</code> <code>-d</code> flag Show detailed version info <code>--json</code> flag Output in JSON format <p>Examples:</p> <pre><code># Basic version info\npython Main.py version\n\n# Detailed version with dependencies\npython Main.py version --detailed\n\n# JSON output for scripts\npython Main.py version --json\n</code></pre>"},{"location":"usage/commands/#help","title":"<code>help</code>","text":"<p>Show help information.</p> <pre><code>python Main.py help [COMMAND]\n</code></pre> <p>Examples:</p> <pre><code># General help\npython Main.py help\n\n# Help for specific command\npython Main.py help snipe\npython Main.py help config-create\n</code></pre>"},{"location":"usage/commands/#utility-commands","title":"Utility Commands","text":""},{"location":"usage/commands/#generate-token","title":"<code>generate-token</code>","text":"<p>Helper to generate bearer tokens (if implemented).</p> <pre><code>python Main.py generate-token [OPTIONS]\n</code></pre> <p>Options:</p> Option Short Type Description <code>--interactive</code> <code>-i</code> flag Interactive token generation <code>--save</code> <code>-s</code> flag Save token to config"},{"location":"usage/commands/#check-username","title":"<code>check-username</code>","text":"<p>Check username availability and drop time.</p> <pre><code>python Main.py check-username [USERNAME] [OPTIONS]\n</code></pre> <p>Options:</p> Option Short Type Description <code>--json</code> flag Output in JSON format <code>--watch</code> <code>-w</code> flag Continuously monitor <p>Examples:</p> <pre><code># Check single username\npython Main.py check-username \"DesiredName\"\n\n# Monitor continuously\npython Main.py check-username \"DesiredName\" --watch\n\n# JSON output\npython Main.py check-username \"DesiredName\" --json\n</code></pre>"},{"location":"usage/commands/#global-options","title":"Global Options","text":"<p>These options work with any command:</p> Option Description Example <code>--help</code> Show command help <code>python Main.py snipe --help</code> <code>--quiet</code> Suppress non-error output <code>python Main.py snipe --quiet</code> <code>--verbose</code> Increase output verbosity <code>python Main.py snipe --verbose</code> <code>--log-file</code> Custom log file path <code>python Main.py snipe --log-file \"custom.log\"</code> <code>--no-color</code> Disable colored output <code>python Main.py snipe --no-color</code>"},{"location":"usage/commands/#environment-variables","title":"Environment Variables","text":"<p>Override settings using environment variables:</p> Variable Description Example <code>NAMEMC_CONFIG</code> Default config file path <code>export NAMEMC_CONFIG=\"prod.yaml\"</code> <code>NAMEMC_TOKEN</code> Default bearer token <code>export NAMEMC_TOKEN=\"eyJ0eXAi...\"</code> <code>NAMEMC_DEBUG</code> Enable debug mode <code>export NAMEMC_DEBUG=\"true\"</code> <code>NAMEMC_LOG_LEVEL</code> Set log level <code>export NAMEMC_LOG_LEVEL=\"DEBUG\"</code>"},{"location":"usage/commands/#configuration-file-options","title":"Configuration File Options","text":"<p>When using config files, these settings are available:</p>"},{"location":"usage/commands/#snipe-section","title":"Snipe Section","text":"<pre><code>snipe:\n  target_username: \"string\"           # Username to snipe\n  bearer_token: \"string\"              # Authentication token\n  start_sniping_at_seconds: 30        # Seconds before drop to start\n  max_snipe_attempts: 100             # Maximum attempts\n  request_delay_ms: 25                # Delay between requests\n  concurrent_requests: 10             # Concurrent request count\n  use_multiple_threads: true          # Enable threading\n</code></pre>"},{"location":"usage/commands/#proxy-section","title":"Proxy Section","text":"<pre><code>proxy:\n  enabled: true                       # Enable proxy usage\n  proxies: [\"http://ip:port\"]         # Proxy list\n  rotation_enabled: true              # Enable rotation\n  timeout: 10                         # Connection timeout\n  max_retries: 3                      # Retry attempts\n</code></pre>"},{"location":"usage/commands/#discord-section","title":"Discord Section","text":"<pre><code>discord:\n  enabled: true                       # Enable notifications\n  webhook_url: \"string\"               # Webhook URL\n  bot_token: \"string\"                 # Bot token (alternative)\n  channel_id: \"string\"                # Channel ID (for bot)\n  mention_role_id: \"string\"           # Role to mention\n  embed_color: 65280                  # Embed color (decimal)\n</code></pre>"},{"location":"usage/commands/#exit-codes","title":"Exit Codes","text":"<p>NameMC Sniper uses these exit codes:</p> Code Meaning 0 Success 1 General error 2 Configuration error 3 Authentication error 4 Network error 5 Proxy error 6 Discord error 130 Interrupted by user (Ctrl+C)"},{"location":"usage/commands/#advanced-usage-examples","title":"Advanced Usage Examples","text":""},{"location":"usage/commands/#scripted-deployment","title":"Scripted Deployment","text":"<pre><code>#!/bin/bash\n# Automated sniper setup script\n\n# Validate environment\npython Main.py config-validate --strict || exit 1\npython Main.py test-proxies --timeout 5 || exit 1\n\n# Start sniping with logging\npython Main.py snipe \\\n  --username \"$TARGET_USERNAME\" \\\n  --token \"$BEARER_TOKEN\" \\\n  --log-file \"snipe-$(date +%Y%m%d).log\" \\\n  --verbose\n</code></pre>"},{"location":"usage/commands/#multiple-username-monitoring","title":"Multiple Username Monitoring","text":"<pre><code># Monitor multiple usernames (requires scripting)\nfor username in \"Name1\" \"Name2\" \"Name3\"; do\n  python Main.py check-username \"$username\" --json &gt;&gt; \"availability.json\"\ndone\n</code></pre>"},{"location":"usage/commands/#production-configuration","title":"Production Configuration","text":"<pre><code># Production snipe with all safety checks\npython Main.py config-validate --strict --fix\npython Main.py test-proxies --export \"proxy-status.json\"\npython Main.py snipe \\\n  --config \"production.yaml\" \\\n  --no-notifications \\\n  --log-file \"/var/log/namemc-sniper.log\"\n</code></pre>"},{"location":"usage/commands/#next-steps","title":"Next Steps","text":"<ul> <li>Learn Discord setup in Discord Setup</li> <li>Configure proxies in Proxy Setup</li> <li>Optimize performance in Performance Optimization</li> </ul>"},{"location":"usage/discord-setup/","title":"Discord Setup","text":"<p>Configure Discord notifications to receive real-time updates about your sniping progress.</p>"},{"location":"usage/discord-setup/#notification-types","title":"Notification Types","text":"<p>NameMC Sniper sends several types of Discord notifications:</p> <ul> <li>Countdown alerts (24h, 12h, 6h, 2h, 1h, 30m, 5m, 1m, 30s before drop)</li> <li>Snipe start notification (when sniping begins)</li> <li>Success/failure results (final outcome)</li> <li>Error alerts (proxy failures, token issues, etc.)</li> </ul>"},{"location":"usage/discord-setup/#setup-methods","title":"Setup Methods","text":"<p>You can use either webhooks (recommended) or Discord bots for notifications.</p>"},{"location":"usage/discord-setup/#method-1-webhook-setup-recommended","title":"Method 1: Webhook Setup (Recommended)","text":"<p>Webhooks are easier to set up and more reliable for notifications.</p>"},{"location":"usage/discord-setup/#step-1-create-a-webhook","title":"Step 1: Create a Webhook","text":"<ol> <li>Open Discord and go to your server</li> <li>Right-click the channel where you want notifications</li> <li>Select \"Edit Channel\"</li> <li>Go to \"Integrations\" tab</li> <li>Click \"Create Webhook\"</li> <li>Name your webhook (e.g., \"NameMC Sniper\")</li> <li>Copy the webhook URL</li> </ol>"},{"location":"usage/discord-setup/#step-2-configure-webhook","title":"Step 2: Configure Webhook","text":"<p>Add the webhook URL to your <code>config.yaml</code>:</p> <pre><code>discord:\n  enabled: true\n  webhook_url: \"https://discord.com/api/webhooks/1234567890/abcdef...\"\n  bot_token: \"\"  # Leave empty when using webhook\n  channel_id: \"\"  # Leave empty when using webhook\n  mention_role_id: \"123456789012345678\"  # Optional: Role ID to mention\n  embed_color: 65280  # Green color (decimal)\n</code></pre>"},{"location":"usage/discord-setup/#step-3-test-webhook","title":"Step 3: Test Webhook","text":"<pre><code>python Main.py test-discord-webhook\n</code></pre>"},{"location":"usage/discord-setup/#method-2-discord-bot-setup","title":"Method 2: Discord Bot Setup","text":"<p>Bots provide more features but require more setup.</p>"},{"location":"usage/discord-setup/#step-1-create-discord-application","title":"Step 1: Create Discord Application","text":"<ol> <li>Go to Discord Developer Portal</li> <li>Click \"New Application\"</li> <li>Name your application (e.g., \"NameMC Sniper Bot\")</li> <li>Go to \"Bot\" section</li> <li>Click \"Add Bot\"</li> <li>Copy the bot token</li> </ol>"},{"location":"usage/discord-setup/#step-2-add-bot-to-server","title":"Step 2: Add Bot to Server","text":"<ol> <li>Go to \"OAuth2\" &gt; \"URL Generator\"</li> <li>Select scopes: <code>bot</code></li> <li>Select permissions: <code>Send Messages</code>, <code>Embed Links</code>, <code>Mention Everyone</code></li> <li>Copy the generated URL and open it</li> <li>Add bot to your server</li> </ol>"},{"location":"usage/discord-setup/#step-3-configure-bot","title":"Step 3: Configure Bot","text":"<pre><code>discord:\n  enabled: true\n  webhook_url: \"\"  # Leave empty when using bot\n  bot_token: \"your_bot_token_here\"\n  channel_id: \"123456789012345678\"  # Channel ID for notifications\n  mention_role_id: \"123456789012345678\"  # Optional: Role ID to mention\n  embed_color: 65280  # Green color (decimal)\n</code></pre>"},{"location":"usage/discord-setup/#step-4-get-channel-id","title":"Step 4: Get Channel ID","text":"<ol> <li>Enable Developer Mode in Discord (User Settings &gt; Advanced &gt; Developer Mode)</li> <li>Right-click the channel where you want notifications</li> <li>Select \"Copy ID\"</li> <li>Paste the ID into <code>channel_id</code> in config</li> </ol>"},{"location":"usage/discord-setup/#customization-options","title":"Customization Options","text":""},{"location":"usage/discord-setup/#embed-colors","title":"Embed Colors","text":"<p>Choose notification colors (decimal format):</p> Color Decimal Hex Use Case Green <code>65280</code> <code>#00FF00</code> Success notifications Red <code>16711680</code> <code>#FF0000</code> Error notifications Yellow <code>16776960</code> <code>#FFFF00</code> Warning notifications Blue <code>255</code> <code>#0000FF</code> Info notifications Purple <code>8388736</code> <code>#800080</code> Countdown notifications"},{"location":"usage/discord-setup/#role-mentions","title":"Role Mentions","text":"<p>To mention a role in notifications:</p> <ol> <li>Create or find a role in your Discord server</li> <li>Get the role ID:</li> <li>Type <code>\\@RoleName</code> in Discord</li> <li>Copy the ID from the result: <code>&lt;@&amp;123456789012345678&gt;</code></li> <li>Use just the numbers: <code>123456789012345678</code></li> <li>Add to config:    <pre><code>discord:\n  mention_role_id: \"123456789012345678\"\n</code></pre></li> </ol>"},{"location":"usage/discord-setup/#custom-messages","title":"Custom Messages","text":"<p>Advanced users can customize notification messages by modifying the source code or using templates:</p> <pre><code>discord:\n  templates:\n    countdown: \"\u23f0 **{time_remaining}** until {username} drops!\"\n    snipe_start: \"\ud83c\udfaf Starting snipe attempts for **{username}**\"\n    success: \"\ud83c\udf89 Successfully sniped **{username}**!\"\n    failure: \"\u274c Failed to snipe **{username}**\"\n</code></pre>"},{"location":"usage/discord-setup/#notification-examples","title":"Notification Examples","text":""},{"location":"usage/discord-setup/#countdown-notification","title":"Countdown Notification","text":"<pre><code>\u23f0 Username Drop Alert\n\n\ud83c\udfaf Target: ExampleUser\n\u23f1\ufe0f Time Remaining: 2 hours\n\ud83d\udcc5 Drop Time: 2024-01-15 14:30:00 UTC\n\ud83d\udd17 NameMC: https://namemc.com/profile/ExampleUser\n\n@SnipeRole Get ready!\n</code></pre>"},{"location":"usage/discord-setup/#success-notification","title":"Success Notification","text":"<pre><code>\ud83c\udf89 Snipe Successful!\n\n\u2705 Username: ExampleUser\n\u26a1 Attempts: 47\n\u23f1\ufe0f Duration: 2.3 seconds\n\ud83c\udf10 Proxy Used: proxy1.example.com\n\ud83d\udcca Success Rate: 100%\n\nCongratulations! \ud83c\udf8a\n</code></pre>"},{"location":"usage/discord-setup/#error-notification","title":"Error Notification","text":"<pre><code>\u274c Snipe Failed\n\n\ud83c\udfaf Username: ExampleUser\n\u274c Reason: Rate limited\n\ud83d\udd04 Attempts Made: 100\n\u23f1\ufe0f Duration: 30 seconds\n\ud83c\udf10 Proxies Tried: 5\n\nCheck logs for details.\n</code></pre>"},{"location":"usage/discord-setup/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"usage/discord-setup/#multiple-webhooks","title":"Multiple Webhooks","text":"<p>Send different notification types to different channels:</p> <pre><code>discord:\n  enabled: true\n  webhooks:\n    countdown: \"https://discord.com/api/webhooks/.../countdown\"\n    results: \"https://discord.com/api/webhooks/.../results\"\n    errors: \"https://discord.com/api/webhooks/.../errors\"\n</code></pre>"},{"location":"usage/discord-setup/#conditional-notifications","title":"Conditional Notifications","text":"<p>Control when notifications are sent:</p> <pre><code>discord:\n  enabled: true\n  webhook_url: \"https://discord.com/api/webhooks/...\"\n  conditions:\n    send_countdown: true\n    send_errors: true\n    send_success: true\n    send_failure: true\n    min_time_remaining: 3600  # Only send if &gt;1 hour remaining\n</code></pre>"},{"location":"usage/discord-setup/#rate-limiting","title":"Rate Limiting","text":"<p>Prevent Discord rate limiting:</p> <pre><code>discord:\n  enabled: true\n  webhook_url: \"https://discord.com/api/webhooks/...\"\n  rate_limit:\n    max_messages_per_minute: 5\n    burst_limit: 2\n    cooldown_seconds: 60\n</code></pre>"},{"location":"usage/discord-setup/#testing-your-setup","title":"Testing Your Setup","text":""},{"location":"usage/discord-setup/#test-webhook","title":"Test Webhook","text":"<pre><code># Test webhook connection\ncurl -X POST \"YOUR_WEBHOOK_URL\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"content\": \"Test message from NameMC Sniper!\"}'\n</code></pre>"},{"location":"usage/discord-setup/#test-bot","title":"Test Bot","text":"<pre><code># Test bot with dry run\npython Main.py snipe --dry-run --debug\n</code></pre>"},{"location":"usage/discord-setup/#validate-configuration","title":"Validate Configuration","text":"<pre><code># Check Discord configuration\npython Main.py config-validate --section discord\n</code></pre>"},{"location":"usage/discord-setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"usage/discord-setup/#common-issues","title":"Common Issues","text":"<p>Webhook not working: - Verify webhook URL is correct and complete - Check if webhook was deleted from Discord - Ensure channel permissions allow webhooks</p> <p>Bot not responding: - Verify bot token is correct - Check if bot has necessary permissions - Ensure bot is online and in the server</p> <p>No notifications received: - Check Discord notification settings - Verify channel ID is correct - Test with a simple message first</p> <p>Rate limiting errors: - Reduce notification frequency - Use fewer concurrent requests - Implement rate limiting in config</p>"},{"location":"usage/discord-setup/#debug-mode","title":"Debug Mode","text":"<p>Enable debug mode to see detailed Discord communication:</p> <pre><code>python Main.py snipe --debug\n</code></pre> <p>Look for Discord-related log entries: <pre><code>[DEBUG] Discord webhook: Sending countdown notification\n[DEBUG] Discord response: 200 OK\n[ERROR] Discord webhook failed: 429 Too Many Requests\n</code></pre></p>"},{"location":"usage/discord-setup/#security-considerations","title":"Security Considerations","text":""},{"location":"usage/discord-setup/#webhook-security","title":"Webhook Security","text":"<ul> <li>Don't share webhook URLs publicly</li> <li>Regenerate webhooks if compromised</li> <li>Use HTTPS webhooks only</li> </ul>"},{"location":"usage/discord-setup/#bot-security","title":"Bot Security","text":"<ul> <li>Keep bot tokens private</li> <li>Use minimal permissions</li> <li>Regularly rotate tokens</li> <li>Monitor bot activity</li> </ul>"},{"location":"usage/discord-setup/#channel-security","title":"Channel Security","text":"<ul> <li>Use private channels for sensitive notifications</li> <li>Limit channel access to trusted users</li> <li>Avoid logging sensitive data in notifications</li> </ul>"},{"location":"usage/discord-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Configure proxy settings in Proxy Setup</li> <li>Optimize performance in Performance Optimization</li> <li>Learn troubleshooting in Troubleshooting</li> </ul>"},{"location":"usage/proxy-setup/","title":"Proxy Setup","text":"<p>Configure proxy rotation to improve sniping performance and avoid rate limiting.</p>"},{"location":"usage/proxy-setup/#why-use-proxies","title":"Why Use Proxies?","text":"<p>Proxies provide several benefits for username sniping:</p> <ul> <li>Avoid rate limiting - Distribute requests across multiple IP addresses</li> <li>Improve success rate - Multiple connection paths to Minecraft servers</li> <li>Geographic advantage - Use proxies closer to Minecraft servers</li> <li>Redundancy - Continue sniping if one proxy fails</li> </ul>"},{"location":"usage/proxy-setup/#proxy-configuration","title":"Proxy Configuration","text":""},{"location":"usage/proxy-setup/#basic-setup","title":"Basic Setup","text":"<p>Add proxies to your <code>config.yaml</code>:</p> <pre><code>proxy:\n  enabled: true\n  proxies:\n    - \"http://proxy1.example.com:8080\"\n    - \"http://proxy2.example.com:8080\"\n    - \"http://proxy3.example.com:8080\"\n  rotation_enabled: true\n  timeout: 10\n  max_retries: 3\n</code></pre>"},{"location":"usage/proxy-setup/#advanced-configuration","title":"Advanced Configuration","text":"<pre><code>proxy:\n  enabled: true\n  proxies:\n    - \"http://user:pass@proxy1.example.com:8080\"\n    - \"https://proxy2.example.com:3128\"\n    - \"socks5://proxy3.example.com:1080\"\n  rotation_enabled: true\n  timeout: 10\n  max_retries: 3\n  health_check:\n    enabled: true\n    interval: 300  # Check every 5 minutes\n    url: \"https://api.minecraft.net/status\"\n  load_balancing:\n    method: \"round_robin\"  # round_robin, random, least_used\n    sticky_sessions: false\n</code></pre>"},{"location":"usage/proxy-setup/#supported-proxy-types","title":"Supported Proxy Types","text":""},{"location":"usage/proxy-setup/#http-proxies","title":"HTTP Proxies","text":"<p>Most common and widely supported:</p> <pre><code>proxies:\n  - \"http://ip:port\"\n  - \"http://username:password@ip:port\"\n</code></pre>"},{"location":"usage/proxy-setup/#https-proxies","title":"HTTPS Proxies","text":"<p>Encrypted HTTP proxies:</p> <pre><code>proxies:\n  - \"https://ip:port\"\n  - \"https://username:password@ip:port\"\n</code></pre>"},{"location":"usage/proxy-setup/#socks5-proxies","title":"SOCKS5 Proxies","text":"<p>More versatile, supports UDP:</p> <pre><code>proxies:\n  - \"socks5://ip:port\"\n  - \"socks5://username:password@ip:port\"\n</code></pre>"},{"location":"usage/proxy-setup/#proxy-providers","title":"Proxy Providers","text":""},{"location":"usage/proxy-setup/#recommended-providers","title":"Recommended Providers","text":"<p>Residential Proxies (Best for sniping): - Bright Data - High quality, expensive - Oxylabs - Good performance, reliable - Smartproxy - Affordable residential proxies</p> <p>Datacenter Proxies (Budget option): - ProxyRack - Cheap datacenter proxies - MyPrivateProxy - Dedicated proxies - HighProxies - Shared and dedicated options</p>"},{"location":"usage/proxy-setup/#proxy-requirements","title":"Proxy Requirements","text":"<p>For optimal sniping performance:</p> <ul> <li>Low latency (&lt;100ms to Minecraft servers)</li> <li>High uptime (&gt;99%)</li> <li>Good speed (&gt;10 Mbps)</li> <li>Geographic diversity (multiple locations)</li> <li>Rotating IPs (to avoid detection)</li> </ul>"},{"location":"usage/proxy-setup/#testing-proxies","title":"Testing Proxies","text":""},{"location":"usage/proxy-setup/#built-in-proxy-testing","title":"Built-in Proxy Testing","text":"<p>Test all configured proxies:</p> <pre><code>python Main.py test-proxies\n</code></pre> <p>Test with custom timeout:</p> <pre><code>python Main.py test-proxies --timeout 5\n</code></pre> <p>Verbose output with detailed results:</p> <pre><code>python Main.py test-proxies --verbose --export \"proxy-results.json\"\n</code></pre>"},{"location":"usage/proxy-setup/#manual-proxy-testing","title":"Manual Proxy Testing","text":"<p>Test individual proxies with curl:</p> <pre><code># Test HTTP proxy\ncurl --proxy \"http://proxy:port\" \"https://api.minecraft.net/status\"\n\n# Test with authentication\ncurl --proxy \"http://user:pass@proxy:port\" \"https://api.minecraft.net/status\"\n\n# Test SOCKS5 proxy\ncurl --socks5 \"proxy:port\" \"https://api.minecraft.net/status\"\n</code></pre>"},{"location":"usage/proxy-setup/#python-testing-script","title":"Python Testing Script","text":"<pre><code>import requests\nimport time\n\ndef test_proxy(proxy_url):\n    try:\n        proxies = {\"http\": proxy_url, \"https\": proxy_url}\n        start_time = time.time()\n\n        response = requests.get(\n            \"https://api.minecraft.net/status\",\n            proxies=proxies,\n            timeout=10\n        )\n\n        latency = (time.time() - start_time) * 1000\n\n        if response.status_code == 200:\n            print(f\"\u2705 {proxy_url} - {latency:.0f}ms\")\n            return True\n        else:\n            print(f\"\u274c {proxy_url} - Status: {response.status_code}\")\n            return False\n\n    except Exception as e:\n        print(f\"\u274c {proxy_url} - Error: {str(e)}\")\n        return False\n\n# Test your proxies\nproxies = [\n    \"http://proxy1:port\",\n    \"http://proxy2:port\",\n    \"http://proxy3:port\"\n]\n\nfor proxy in proxies:\n    test_proxy(proxy)\n</code></pre>"},{"location":"usage/proxy-setup/#rotation-strategies","title":"Rotation Strategies","text":""},{"location":"usage/proxy-setup/#round-robin","title":"Round Robin","text":"<p>Cycle through proxies in order:</p> <pre><code>proxy:\n  load_balancing:\n    method: \"round_robin\"\n</code></pre>"},{"location":"usage/proxy-setup/#random-selection","title":"Random Selection","text":"<p>Randomly select proxies:</p> <pre><code>proxy:\n  load_balancing:\n    method: \"random\"\n</code></pre>"},{"location":"usage/proxy-setup/#least-used","title":"Least Used","text":"<p>Use the proxy with fewest recent requests:</p> <pre><code>proxy:\n  load_balancing:\n    method: \"least_used\"\n</code></pre>"},{"location":"usage/proxy-setup/#performance-based","title":"Performance-Based","text":"<p>Prioritize faster proxies:</p> <pre><code>proxy:\n  load_balancing:\n    method: \"performance\"\n    metrics:\n      - \"latency\"\n      - \"success_rate\"\n      - \"uptime\"\n</code></pre>"},{"location":"usage/proxy-setup/#optimization-settings","title":"Optimization Settings","text":""},{"location":"usage/proxy-setup/#connection-settings","title":"Connection Settings","text":"<pre><code>proxy:\n  timeout: 10              # Connection timeout (seconds)\n  max_retries: 3           # Retry attempts per proxy\n  retry_delay: 1           # Delay between retries (seconds)\n  connection_pool_size: 10 # Max concurrent connections per proxy\n</code></pre>"},{"location":"usage/proxy-setup/#health-monitoring","title":"Health Monitoring","text":"<pre><code>proxy:\n  health_check:\n    enabled: true\n    interval: 300           # Check every 5 minutes\n    timeout: 5              # Health check timeout\n    failure_threshold: 3    # Failures before marking unhealthy\n    recovery_threshold: 2   # Successes before marking healthy\n    endpoints:\n      - \"https://api.minecraft.net/status\"\n      - \"https://sessionserver.mojang.com/session/minecraft/profile/test\"\n</code></pre>"},{"location":"usage/proxy-setup/#automatic-failover","title":"Automatic Failover","text":"<pre><code>proxy:\n  failover:\n    enabled: true\n    max_failures: 5         # Max failures before switching\n    cooldown_period: 300    # Seconds before retrying failed proxy\n    fallback_to_direct: true # Use direct connection if all proxies fail\n</code></pre>"},{"location":"usage/proxy-setup/#performance-monitoring","title":"Performance Monitoring","text":""},{"location":"usage/proxy-setup/#proxy-metrics","title":"Proxy Metrics","text":"<p>Monitor proxy performance:</p> <pre><code>proxy:\n  monitoring:\n    enabled: true\n    metrics:\n      - \"latency\"\n      - \"success_rate\"\n      - \"bandwidth\"\n      - \"uptime\"\n    export_interval: 3600   # Export metrics every hour\n    export_format: \"json\"   # json, csv, prometheus\n</code></pre>"},{"location":"usage/proxy-setup/#logging","title":"Logging","text":"<p>Enable detailed proxy logging:</p> <pre><code>logging:\n  level: \"DEBUG\"\n  proxy_logs: true\n  include_metrics: true\n</code></pre>"},{"location":"usage/proxy-setup/#common-issues","title":"Common Issues","text":""},{"location":"usage/proxy-setup/#proxy-authentication-errors","title":"Proxy Authentication Errors","text":"<p>Problem: 407 Proxy Authentication Required</p> <p>Solutions: - Verify username/password are correct - Check if proxy requires different auth method - Ensure special characters are URL-encoded</p> <pre><code>import urllib.parse\n\nusername = urllib.parse.quote(\"user@domain.com\")\npassword = urllib.parse.quote(\"p@ssw0rd!\")\nproxy = f\"http://{username}:{password}@proxy:port\"\n</code></pre>"},{"location":"usage/proxy-setup/#connection-timeouts","title":"Connection Timeouts","text":"<p>Problem: Proxies timing out frequently</p> <p>Solutions: - Increase timeout values - Use proxies closer to Minecraft servers - Test proxy speed and stability - Reduce concurrent connections per proxy</p>"},{"location":"usage/proxy-setup/#rate-limiting","title":"Rate Limiting","text":"<p>Problem: Getting rate limited despite using proxies</p> <p>Solutions: - Use more proxies - Increase delays between requests - Use residential proxies instead of datacenter - Implement better rotation logic</p>"},{"location":"usage/proxy-setup/#ip-blocking","title":"IP Blocking","text":"<p>Problem: Proxy IPs getting blocked</p> <p>Solutions: - Use high-quality residential proxies - Rotate IPs more frequently - Avoid aggressive request patterns - Use proxies from different subnets</p>"},{"location":"usage/proxy-setup/#security-considerations","title":"Security Considerations","text":""},{"location":"usage/proxy-setup/#proxy-security","title":"Proxy Security","text":"<ul> <li>Use HTTPS proxies when possible</li> <li>Verify proxy provider reputation</li> <li>Monitor for data leaks</li> <li>Avoid free public proxies</li> </ul>"},{"location":"usage/proxy-setup/#authentication-security","title":"Authentication Security","text":"<ul> <li>Store credentials securely</li> <li>Use environment variables</li> <li>Rotate credentials regularly</li> <li>Monitor for unauthorized access</li> </ul> <pre><code># Secure credential storage\nproxy:\n  proxies:\n    - \"http://${PROXY_USER}:${PROXY_PASS}@proxy1:port\"\n    - \"http://${PROXY_USER}:${PROXY_PASS}@proxy2:port\"\n</code></pre>"},{"location":"usage/proxy-setup/#best-practices","title":"Best Practices","text":""},{"location":"usage/proxy-setup/#proxy-selection","title":"Proxy Selection","text":"<ol> <li>Quality over quantity - Better to have 5 good proxies than 50 bad ones</li> <li>Geographic diversity - Use proxies from different regions</li> <li>Provider diversity - Don't rely on a single provider</li> <li>Regular testing - Monitor proxy health continuously</li> </ol>"},{"location":"usage/proxy-setup/#configuration-tips","title":"Configuration Tips","text":"<ol> <li>Start conservative - Begin with higher timeouts and delays</li> <li>Monitor performance - Track success rates and adjust</li> <li>Plan for failures - Always have backup proxies</li> <li>Test before sniping - Validate setup before important drops</li> </ol>"},{"location":"usage/proxy-setup/#cost-optimization","title":"Cost Optimization","text":"<ol> <li>Residential for important snipes - Use premium proxies for valuable usernames</li> <li>Datacenter for testing - Use cheaper proxies for development</li> <li>Monitor usage - Track bandwidth and request limits</li> <li>Optimize rotation - Reduce unnecessary proxy switches</li> </ol>"},{"location":"usage/proxy-setup/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about performance optimization in Performance Optimization</li> <li>Understand the sniping process in How It Works</li> <li>Troubleshoot issues in Troubleshooting</li> </ul>"}]}